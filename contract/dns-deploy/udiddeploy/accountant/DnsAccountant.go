// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accountant

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DnsAccountantMetaData contains all meta data concerning the DnsAccountant contract.
var DnsAccountantMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dnsTop_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"out\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"EvWithdrawCash\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"closeMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"delSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dnsTop\",\"outputs\":[{\"internalType\":\"contractIDnsTopLevelName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Addr_\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"getAllTask\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx_\",\"type\":\"uint256\"}],\"name\":\"getContractList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[8]\",\"name\":\"\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"candidate_\",\"type\":\"address\"}],\"name\":\"getSafeSig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"getSignerSetAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cnt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"getTaskSignerSetAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiSignerStore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"work\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"SignerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"openMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"removeSafeSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dnsTop_\",\"type\":\"address\"}],\"name\":\"setRelation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"out_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"withdrawCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620055be380380620055be83398181016040528101906200003791906200009e565b600360028190555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b600081519050620000988162000109565b92915050565b600060208284031215620000b757620000b662000104565b5b6000620000c78482850162000087565b91505092915050565b6000620000dd82620000e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200011481620000d0565b81146200012057600080fd5b50565b61548b80620001336000396000f3fe6080604052600436106101185760003560e01c806356a77bfe116100a0578063ba272e0311610064578063ba272e03146103f1578063d81e84231461041a578063e8fe7bff14610457578063ea6e0c0c14610482578063f3c8bb0c146104bf5761011f565b806356a77bfe146102e85780636594558714610311578063741489b71461034e57806374fa74f81461038b5780638340f549146103c85761011f565b8063328d4d8c116100e7578063328d4d8c146101db5780633410c6f91461021a5780633db98b041461025957806347fd8e7d146102965780634f93e17f146102bf5761011f565b80630868f7b11461012157806313f1ff1b1461014a5780632239f556146101735780632696145b1461019c5761011f565b3661011f57005b005b34801561012d57600080fd5b506101486004803603810190610143919061431f565b6104ea565b005b34801561015657600080fd5b50610171600480360381019061016c9190614439565b610605565b005b34801561017f57600080fd5b5061019a600480360381019061019591906143a6565b6106b3565b005b3480156101a857600080fd5b506101c360048036038101906101be919061431f565b61108a565b6040516101d293929190614b4b565b60405180910390f35b3480156101e757600080fd5b5061020260048036038101906101fd9190614439565b6110ce565b60405161021193929190614eee565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c91906144cc565b611196565b60405161025093929190614eb6565b60405180910390f35b34801561026557600080fd5b50610280600480360381019061027b919061431f565b6113eb565b60405161028d9190614b82565b60405180910390f35b3480156102a257600080fd5b506102bd60048036038101906102b8919061450c565b6114db565b005b3480156102cb57600080fd5b506102e660048036038101906102e191906143a6565b61230e565b005b3480156102f457600080fd5b5061030f600480360381019061030a919061431f565b612ce5565b005b34801561031d57600080fd5b506103386004803603810190610333919061431f565b6136b9565b6040516103459190614b82565b60405180910390f35b34801561035a57600080fd5b50610375600480360381019061037091906144cc565b6137c9565b6040516103829190614a2b565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad9190614479565b613817565b6040516103bf9190614b30565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea91906143e6565b6139f1565b005b3480156103fd57600080fd5b506104186004803603810190610413919061431f565b613c08565b005b34801561042657600080fd5b50610441600480360381019061043c91906143a6565b614043565b60405161044e9190614e9b565b60405180910390f35b34801561046357600080fd5b5061046c6140db565b6040516104799190614e9b565b60405180910390f35b34801561048e57600080fd5b506104a960048036038101906104a49190614439565b6140e1565b6040516104b69190614b82565b60405180910390f35b3480156104cb57600080fd5b506104d46140f5565b6040516104e19190614ba4565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561055257600080fd5b505afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105c157600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b815260040161067f93929190614e64565b60006040518083038186803b15801561069757600080fd5b505af41580156106ab573d6000803e3d6000fd5b505050505050565b818282632239f55660e01b6040516020016106d093929190614913565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d90614bdf565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415610a13578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f757600080fd5b505afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390614cdf565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d7c391a99091856040518363ffffffff1660e01b8152600401610914929190614d96565b60006040518083038186803b15801561092c57600080fd5b505af4158015610940573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091866040518363ffffffff1660e01b81526004016109bd929190614b07565b60206040518083038186803b1580156109d557600080fd5b505af41580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d91906145a0565b50611084565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590614c5f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b8152600401610b56929190614e3b565b60206040518083038186803b158015610b6e57600080fd5b505af4158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190614573565b610cec576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615610c39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3090614c1f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b8152600401610cb79493929190614df6565b60006040518083038186803b158015610ccf57600080fd5b505af4158015610ce3573d6000803e3d6000fd5b50505050611083565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b8152600401610d6693929190614dbf565b60006040518083038186803b158015610d7e57600080fd5b505af4158015610d92573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b8152600401610e1093929190614e64565b60206040518083038186803b158015610e2857600080fd5b505af4158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190614573565b15611082576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d7c391a99091856040518363ffffffff1660e01b8152600401610edd929190614d96565b60006040518083038186803b158015610ef557600080fd5b505af4158015610f09573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091866040518363ffffffff1660e01b8152600401610f86929190614b07565b60206040518083038186803b158015610f9e57600080fd5b505af4158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906145a0565b506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b815260040161105193929190614e64565b60006040518083038186803b15801561106957600080fd5b505af415801561107d573d6000803e3d6000fd5b505050505b5b5b50505050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b60008060606000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000858152602001908152602001600020600001546000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060010154611189878761411b565b9250925092509250925092565b6000806111a1614254565b6111a9614254565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050861061124757600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905060008394509450945050506113e4565b60008690505b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811080156112a957506008876112a69190614f91565b81105b1561139557600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106112ff576112fe6151d0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683826008811061133d5761133c6151d0565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818061137f90615104565b925050808061138d90615104565b91505061124d565b50600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050818394509450945050505b9250925092565b60608060005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501805490508110156114d157816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005018281548110611491576114906151d0565b5b90600052602060002001546040516020016114ad929190614a03565b604051602081830303815290604052915080806114c990615104565b9150506113f1565b5080915050919050565b80848484846347fd8e7d60e01b6040516020016114fc95949392919061497c565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990614bdf565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415611a6a578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf90614cdf565b60405180910390fd5b84600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__636447ac9b9091868a6040518463ffffffff1660e01b815260040161170793929190614cff565b60206040518083038186803b15801561171f57600080fd5b505af4158015611733573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175791906145a0565b1015611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178f90614c3f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561185c5784471015611810576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180790614c3f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611856573d6000803e3d6000fd5b506119b6565b848673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118969190614a2b565b60206040518083038186803b1580156118ae57600080fd5b505afa1580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e691906145a0565b1015611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191e90614bbf565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85876040518363ffffffff1660e01b8152600401611962929190614a46565b602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190614573565b505b600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__63ce07098990918589896040518563ffffffff1660e01b81526004016119f69493929190614d36565b60006040518083038186803b158015611a0e57600080fd5b505af4158015611a22573d6000803e3d6000fd5b505050507f0a9c814dc547650550ef7ab0ca47351429be4f6d9556f7039a7652799f098d783387878787604051611a5d959493929190614ab4565b60405180910390a1612306565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c90614c5f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b8152600401611bad929190614e3b565b60206040518083038186803b158015611bc557600080fd5b505af4158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfd9190614573565b611d43576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8790614c1f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b8152600401611d0e9493929190614df6565b60006040518083038186803b158015611d2657600080fd5b505af4158015611d3a573d6000803e3d6000fd5b50505050612305565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b8152600401611dbd93929190614dbf565b60006040518083038186803b158015611dd557600080fd5b505af4158015611de9573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b8152600401611e6793929190614e64565b60206040518083038186803b158015611e7f57600080fd5b505af4158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb79190614573565b156123045784600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__636447ac9b9091868a6040518463ffffffff1660e01b8152600401611efb93929190614cff565b60206040518083038186803b158015611f1357600080fd5b505af4158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4b91906145a0565b1015611f8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8390614c3f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156120505784471015612004576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffb90614c3f565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f1935050505015801561204a573d6000803e3d6000fd5b506121aa565b848673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161208a9190614a2b565b60206040518083038186803b1580156120a257600080fd5b505afa1580156120b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120da91906145a0565b101561211b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211290614bbf565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85876040518363ffffffff1660e01b8152600401612156929190614a46565b602060405180830381600087803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190614573565b505b600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__63ce07098990918589896040518563ffffffff1660e01b81526004016121ea9493929190614d36565b60006040518083038186803b15801561220257600080fd5b505af4158015612216573d6000803e3d6000fd5b505050507f0a9c814dc547650550ef7ab0ca47351429be4f6d9556f7039a7652799f098d783387878787604051612251959493929190614ab4565b60405180910390a16000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b81526004016122d393929190614e64565b60006040518083038186803b1580156122eb57600080fd5b505af41580156122ff573d6000803e3d6000fd5b505050505b5b5b505050505050565b818282634f93e17f60e01b60405160200161232b93929190614913565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a890614bdf565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515141561266e578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245257600080fd5b505afa158015612466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248a9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ee90614cdf565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__6304c887109091856040518363ffffffff1660e01b815260040161256f929190614d96565b60006040518083038186803b15801561258757600080fd5b505af415801561259b573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__63ec3770099091866040518363ffffffff1660e01b8152600401612618929190614b07565b60206040518083038186803b15801561263057600080fd5b505af4158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190614573565b50612cdf565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273090614c5f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b81526004016127b1929190614e3b565b60206040518083038186803b1580156127c957600080fd5b505af41580156127dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128019190614573565b612947576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288b90614c1f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b81526004016129129493929190614df6565b60006040518083038186803b15801561292a57600080fd5b505af415801561293e573d6000803e3d6000fd5b50505050612cde565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b81526004016129c193929190614dbf565b60006040518083038186803b1580156129d957600080fd5b505af41580156129ed573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b8152600401612a6b93929190614e64565b60206040518083038186803b158015612a8357600080fd5b505af4158015612a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abb9190614573565b15612cdd576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__6304c887109091856040518363ffffffff1660e01b8152600401612b38929190614d96565b60006040518083038186803b158015612b5057600080fd5b505af4158015612b64573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__63ec3770099091866040518363ffffffff1660e01b8152600401612be1929190614b07565b60206040518083038186803b158015612bf957600080fd5b505af4158015612c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c319190614573565b506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b8152600401612cac93929190614e64565b60006040518083038186803b158015612cc457600080fd5b505af4158015612cd8573d6000803e3d6000fd5b505050505b5b5b50505050565b80816356a77bfe60e01b604051602001612d00929190614950565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7d90614bdf565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415613043578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e2757600080fd5b505afa158015612e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5f9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ec390614cdf565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b8152600401612f429190614d7b565b60206040518083038186803b158015612f5a57600080fd5b505af4158015612f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f929190614573565b1561303e576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__639ffff39690916040518263ffffffff1660e01b815260040161300d9190614d7b565b60006040518083038186803b15801561302557600080fd5b505af4158015613039573d6000803e3d6000fd5b505050505b6136b4565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661310e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310590614c5f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b8152600401613186929190614e3b565b60206040518083038186803b15801561319e57600080fd5b505af41580156131b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d69190614573565b61331c576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615613269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326090614c1f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b81526004016132e79493929190614df6565b60006040518083038186803b1580156132ff57600080fd5b505af4158015613313573d6000803e3d6000fd5b505050506136b3565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b815260040161339693929190614dbf565b60006040518083038186803b1580156133ae57600080fd5b505af41580156133c2573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b815260040161344093929190614e64565b60206040518083038186803b15801561345857600080fd5b505af415801561346c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134909190614573565b156136b2576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b815260040161350b9190614d7b565b60206040518083038186803b15801561352357600080fd5b505af4158015613537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355b9190614573565b15613607576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__639ffff39690916040518263ffffffff1660e01b81526004016135d69190614d7b565b60006040518083038186803b1580156135ee57600080fd5b505af4158015613602573d6000803e3d6000fd5b505050505b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b815260040161368193929190614e64565b60006040518083038186803b15801561369957600080fd5b505af41580156136ad573d6000803e3d6000fd5b505050505b5b5b505050565b60608060005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490508110156137bf57816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301828154811061375f5761375e6151d0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405160200161379b9291906149db565b604051602081830303815290604052915080806137b790615104565b9150506136bf565b5080915050919050565b600160205281600052604060002081815481106137e557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b815260040161388f9190614d7b565b60206040518083038186803b1580156138a757600080fd5b505af41580156138bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138df9190614573565b61391e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391590614c7f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909185856040518463ffffffff1660e01b815260040161399893929190614e64565b60206040518083038186803b1580156139b057600080fd5b505af41580156139c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e89190614573565b90509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613b175750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7f43c686040518163ffffffff1660e01b815260040160206040518083038186803b158015613ab057600080fd5b505afa158015613ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ae8919061434c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b613b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4d90614bff565b60405180910390fd5b600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__63e44603cc90918585856040518563ffffffff1660e01b8152600401613b969493929190614d36565b60006040518083038186803b158015613bae57600080fd5b505af4158015613bc2573d6000803e3d6000fd5b505050507f5e8655bc31e2c8e8d0e80adca4302fafb5ec9320198d3221616d9214c130460133848484604051613bfb9493929190614a6f565b60405180910390a1505050565b80600015156000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151514613c9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c9590614cbf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ce457600080fd5b505afa158015613cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1c9190614379565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d8090614cdf565b60405180910390fd5b6002546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__636b0050c490916040518263ffffffff1660e01b8152600401613e029190614d7b565b60206040518083038186803b158015613e1a57600080fd5b505af4158015613e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e5291906145a0565b1015613e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e8a90614c9f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b8152600401613f099190614d7b565b60206040518083038186803b158015613f2157600080fd5b505af4158015613f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f599190614573565b15613f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f9090614c7f565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63e716654290916040518263ffffffff1660e01b815260040161400f9190614d7b565b60006040518083038186803b15801561402757600080fd5b505af415801561403b573d6000803e3d6000fd5b505050505050565b6000600373__$f1fbeac8e6c305d33caaca44e2a1f51440$__636447ac9b909185856040518463ffffffff1660e01b815260040161408393929190614cff565b60206040518083038186803b15801561409b57600080fd5b505af41580156140af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d391906145a0565b905092915050565b60025481565b60606140ed838361411b565b905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60608060005b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008581526020019081526020016000206003018054905081101561424957816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060030182815481106141e9576141e86151d0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016142259291906149db565b6040516020818303038152906040529150808061424190615104565b915050614121565b508091505092915050565b604051806101000160405280600890602082028036833780820191505090505090565b600081359050614286816153e2565b92915050565b60008151905061429b816153e2565b92915050565b6000813590506142b0816153f9565b92915050565b6000815190506142c5816153f9565b92915050565b6000815190506142da81615410565b92915050565b6000813590506142ef81615427565b92915050565b6000813590506143048161543e565b92915050565b6000815190506143198161543e565b92915050565b600060208284031215614335576143346151ff565b5b600061434384828501614277565b91505092915050565b600060208284031215614362576143616151ff565b5b60006143708482850161428c565b91505092915050565b60006020828403121561438f5761438e6151ff565b5b600061439d848285016142b6565b91505092915050565b600080604083850312156143bd576143bc6151ff565b5b60006143cb85828601614277565b92505060206143dc85828601614277565b9150509250929050565b6000806000606084860312156143ff576143fe6151ff565b5b600061440d86828701614277565b935050602061441e86828701614277565b925050604061442f868287016142f5565b9150509250925092565b600080604083850312156144505761444f6151ff565b5b600061445e85828601614277565b925050602061446f858286016142e0565b9150509250929050565b600080600060608486031215614492576144916151ff565b5b60006144a086828701614277565b93505060206144b1868287016142e0565b92505060406144c286828701614277565b9150509250925092565b600080604083850312156144e3576144e26151ff565b5b60006144f185828601614277565b9250506020614502858286016142f5565b9150509250929050565b60008060008060808587031215614526576145256151ff565b5b600061453487828801614277565b9450506020614545878288016142f5565b9350506040614556878288016142a1565b925050606061456787828801614277565b91505092959194509250565b600060208284031215614589576145886151ff565b5b6000614597848285016142cb565b91505092915050565b6000602082840312156145b6576145b56151ff565b5b60006145c48482850161430a565b91505092915050565b60006145d9838361460b565b60208301905092915050565b6145ee81615077565b82525050565b61460561460082614ff9565b61515f565b82525050565b61461481614fe7565b82525050565b61462381614fe7565b82525050565b61463281614fe7565b82525050565b61464961464482614fe7565b61514d565b82525050565b61465881614f36565b6146628184614f59565b925061466d82614f2c565b8060005b8381101561469e57815161468587826145cd565b965061469083614f4c565b925050600181019050614671565b505050505050565b8082525050565b6146b68161500b565b82525050565b6146c581615017565b82525050565b6146dc6146d782615017565b615171565b82525050565b6146f36146ee82615021565b61517b565b82525050565b600061470482614f41565b61470e8185614f64565b935061471e8185602086016150d1565b61472781615204565b840191505092915050565b600061473d82614f41565b6147478185614f75565b93506147578185602086016150d1565b80840191505092915050565b61476c81615089565b82525050565b600061477f600b83614f80565b915061478a82615222565b602082019050919050565b60006147a2601a83614f80565b91506147ad8261524b565b602082019050919050565b60006147c5600b83614f80565b91506147d082615274565b602082019050919050565b60006147e8600d83614f80565b91506147f38261529d565b602082019050919050565b600061480b601183614f80565b9150614816826152c6565b602082019050919050565b600061482e601083614f80565b9150614839826152ef565b602082019050919050565b6000614851601383614f80565b915061485c82615318565b602082019050919050565b6000614874602383614f80565b915061487f82615341565b604082019050919050565b6000614897601983614f80565b91506148a282615390565b602082019050919050565b60006148ba600983614f80565b91506148c5826153b9565b602082019050919050565b8082525050565b8082525050565b6148e78161506d565b82525050565b6148f68161506d565b82525050565b61490d6149088261506d565b615197565b82525050565b600061491f8286614638565b60148201915061492f8285614638565b60148201915061493f82846146e2565b600482019150819050949350505050565b600061495c8285614638565b60148201915061496c82846146e2565b6004820191508190509392505050565b60006149888288614638565b60148201915061499882876148fc565b6020820191506149a882866145f4565b6014820191506149b88285614638565b6014820191506149c882846146e2565b6004820191508190509695505050505050565b60006149e78285614732565b91506149f38284614638565b6014820191508190509392505050565b6000614a0f8285614732565b9150614a1b82846146cb565b6020820191508190509392505050565b6000602082019050614a40600083018461461a565b92915050565b6000604082019050614a5b60008301856145e5565b614a6860208301846148de565b9392505050565b6000608082019050614a84600083018761461a565b614a91602083018661461a565b614a9e604083018561461a565b614aab60608301846148de565b95945050505050565b600060a082019050614ac9600083018861461a565b614ad6602083018761461a565b614ae360408301866148de565b614af060608301856145e5565b614afd608083018461461a565b9695505050505050565b6000604082019050614b1c60008301856146a6565b614b296020830184614629565b9392505050565b6000602082019050614b4560008301846146ad565b92915050565b6000606082019050614b6060008301866146ad565b614b6d60208301856146ad565b614b7a60408301846148de565b949350505050565b60006020820190508181036000830152614b9c81846146f9565b905092915050565b6000602082019050614bb96000830184614763565b92915050565b60006020820190508181036000830152614bd881614772565b9050919050565b60006020820190508181036000830152614bf881614795565b9050919050565b60006020820190508181036000830152614c18816147b8565b9050919050565b60006020820190508181036000830152614c38816147db565b9050919050565b60006020820190508181036000830152614c58816147fe565b9050919050565b60006020820190508181036000830152614c7881614821565b9050919050565b60006020820190508181036000830152614c9881614844565b9050919050565b60006020820190508181036000830152614cb881614867565b9050919050565b60006020820190508181036000830152614cd88161488a565b9050919050565b60006020820190508181036000830152614cf8816148ad565b9050919050565b6000606082019050614d1460008301866148d0565b614d216020830185614629565b614d2e6040830184614629565b949350505050565b6000608082019050614d4b60008301876148d0565b614d586020830186614629565b614d656040830185614629565b614d7260608301846148ed565b95945050505050565b6000602082019050614d9060008301846148d7565b92915050565b6000604082019050614dab60008301856148d7565b614db86020830184614629565b9392505050565b6000606082019050614dd460008301866148d7565b614de16020830185614629565b614dee60408301846146bc565b949350505050565b6000608082019050614e0b60008301876148d7565b614e186020830186614629565b614e2560408301856146bc565b614e3260608301846148ed565b95945050505050565b6000604082019050614e5060008301856148d7565b614e5d60208301846146bc565b9392505050565b6000606082019050614e7960008301866148d7565b614e8660208301856146bc565b614e936040830184614629565b949350505050565b6000602082019050614eb060008301846148de565b92915050565b600061014082019050614ecc60008301866148de565b614ed960208301856148de565b614ee6604083018461464f565b949350505050565b6000606082019050614f0360008301866148de565b614f1060208301856148de565b8181036040830152614f2281846146f9565b9050949350505050565b6000819050919050565b600060089050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614f9c8261506d565b9150614fa78361506d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614fdc57614fdb6151a1565b5b828201905092915050565b6000614ff28261504d565b9050919050565b60006150048261504d565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000615082826150ad565b9050919050565b60006150948261509b565b9050919050565b60006150a68261504d565b9050919050565b60006150b8826150bf565b9050919050565b60006150ca8261504d565b9050919050565b60005b838110156150ef5780820151818401526020810190506150d4565b838111156150fe576000848401525b50505050565b600061510f8261506d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615142576151416151a1565b5b600182019050919050565b600061515882615185565b9050919050565b600061516a82615185565b9050919050565b6000819050919050565b6000819050919050565b600061519082615215565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f6e6f7420656e676f756768000000000000000000000000000000000000000000600082015250565b7f636f6e74726163742061646472657373206e6f742076616c6964000000000000600082015250565b7f6e6f7420616c6c6f776564000000000000000000000000000000000000000000600082015250565b7f6c6f636b206e6f74206672656500000000000000000000000000000000000000600082015250565b7f616d6f756e74206e6f7420656e6f756768000000000000000000000000000000600082015250565b7f7369676e6572206e6f742076616c696400000000000000000000000000000000600082015250565b7f6d756c746920736967206973206f70656e656400000000000000000000000000600082015250565b7f73696e6765722075736572206d757374206d6f72656e2064656661756c74436f60008201527f756e740000000000000000000000000000000000000000000000000000000000602082015250565b7f6d756c7469207369676e6174757265206973206f70656e656400000000000000600082015250565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6153eb81614fe7565b81146153f657600080fd5b50565b61540281614ff9565b811461540d57600080fd5b50565b6154198161500b565b811461542457600080fd5b50565b61543081615017565b811461543b57600080fd5b50565b6154478161506d565b811461545257600080fd5b5056fea2646970667358221220272a944d04dfc5723f2eb2cdce4b12dff63f4dfb4e0a0dcdf99f3a549bfc830c64736f6c63430008060033",
}

// DnsAccountantABI is the input ABI used to generate the binding from.
// Deprecated: Use DnsAccountantMetaData.ABI instead.
var DnsAccountantABI = DnsAccountantMetaData.ABI

// DnsAccountantBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DnsAccountantMetaData.Bin instead.
var DnsAccountantBin = DnsAccountantMetaData.Bin

// DeployDnsAccountant deploys a new Ethereum contract, binding an instance of DnsAccountant to it.
func DeployDnsAccountant(auth *bind.TransactOpts, backend bind.ContractBackend, dnsTop_ common.Address) (common.Address, *types.Transaction, *DnsAccountant, error) {
	parsed, err := DnsAccountantMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	libMultiSigAddr, _, _, _ := DeployLibMultiSig(auth, backend)
	DnsAccountantBin = strings.ReplaceAll(DnsAccountantBin, "__$75b7a25587b53564bca376d1b99e97afd3$__", libMultiSigAddr.String()[2:])

	libAddressArrayAddr, _, _, _ := DeployLibAddressArray(auth, backend)
	DnsAccountantBin = strings.ReplaceAll(DnsAccountantBin, "__$ae7d58307b48f566e6dd130bee0f44ebb6$__", libAddressArrayAddr.String()[2:])

	libDnsAccountantAddr, _, _, _ := DeployLibDnsAccountant(auth, backend)
	DnsAccountantBin = strings.ReplaceAll(DnsAccountantBin, "__$f1fbeac8e6c305d33caaca44e2a1f51440$__", libDnsAccountantAddr.String()[2:])

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DnsAccountantBin), backend, dnsTop_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DnsAccountant{DnsAccountantCaller: DnsAccountantCaller{contract: contract}, DnsAccountantTransactor: DnsAccountantTransactor{contract: contract}, DnsAccountantFilterer: DnsAccountantFilterer{contract: contract}}, nil
}

// DnsAccountant is an auto generated Go binding around an Ethereum contract.
type DnsAccountant struct {
	DnsAccountantCaller     // Read-only binding to the contract
	DnsAccountantTransactor // Write-only binding to the contract
	DnsAccountantFilterer   // Log filterer for contract events
}

// DnsAccountantCaller is an auto generated read-only Go binding around an Ethereum contract.
type DnsAccountantCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DnsAccountantTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DnsAccountantTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DnsAccountantFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DnsAccountantFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DnsAccountantSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DnsAccountantSession struct {
	Contract     *DnsAccountant    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DnsAccountantCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DnsAccountantCallerSession struct {
	Contract *DnsAccountantCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// DnsAccountantTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DnsAccountantTransactorSession struct {
	Contract     *DnsAccountantTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// DnsAccountantRaw is an auto generated low-level Go binding around an Ethereum contract.
type DnsAccountantRaw struct {
	Contract *DnsAccountant // Generic contract binding to access the raw methods on
}

// DnsAccountantCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DnsAccountantCallerRaw struct {
	Contract *DnsAccountantCaller // Generic read-only contract binding to access the raw methods on
}

// DnsAccountantTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DnsAccountantTransactorRaw struct {
	Contract *DnsAccountantTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDnsAccountant creates a new instance of DnsAccountant, bound to a specific deployed contract.
func NewDnsAccountant(address common.Address, backend bind.ContractBackend) (*DnsAccountant, error) {
	contract, err := bindDnsAccountant(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DnsAccountant{DnsAccountantCaller: DnsAccountantCaller{contract: contract}, DnsAccountantTransactor: DnsAccountantTransactor{contract: contract}, DnsAccountantFilterer: DnsAccountantFilterer{contract: contract}}, nil
}

// NewDnsAccountantCaller creates a new read-only instance of DnsAccountant, bound to a specific deployed contract.
func NewDnsAccountantCaller(address common.Address, caller bind.ContractCaller) (*DnsAccountantCaller, error) {
	contract, err := bindDnsAccountant(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DnsAccountantCaller{contract: contract}, nil
}

// NewDnsAccountantTransactor creates a new write-only instance of DnsAccountant, bound to a specific deployed contract.
func NewDnsAccountantTransactor(address common.Address, transactor bind.ContractTransactor) (*DnsAccountantTransactor, error) {
	contract, err := bindDnsAccountant(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DnsAccountantTransactor{contract: contract}, nil
}

// NewDnsAccountantFilterer creates a new log filterer instance of DnsAccountant, bound to a specific deployed contract.
func NewDnsAccountantFilterer(address common.Address, filterer bind.ContractFilterer) (*DnsAccountantFilterer, error) {
	contract, err := bindDnsAccountant(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DnsAccountantFilterer{contract: contract}, nil
}

// bindDnsAccountant binds a generic wrapper to an already deployed contract.
func bindDnsAccountant(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DnsAccountantABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DnsAccountant *DnsAccountantRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DnsAccountant.Contract.DnsAccountantCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DnsAccountant *DnsAccountantRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DnsAccountant.Contract.DnsAccountantTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DnsAccountant *DnsAccountantRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DnsAccountant.Contract.DnsAccountantTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DnsAccountant *DnsAccountantCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DnsAccountant.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DnsAccountant *DnsAccountantTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DnsAccountant.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DnsAccountant *DnsAccountantTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DnsAccountant.Contract.contract.Transact(opts, method, params...)
}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_DnsAccountant *DnsAccountantCaller) ContractList(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "contractList", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_DnsAccountant *DnsAccountantSession) ContractList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _DnsAccountant.Contract.ContractList(&_DnsAccountant.CallOpts, arg0, arg1)
}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_DnsAccountant *DnsAccountantCallerSession) ContractList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _DnsAccountant.Contract.ContractList(&_DnsAccountant.CallOpts, arg0, arg1)
}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_DnsAccountant *DnsAccountantCaller) DefaultCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "defaultCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_DnsAccountant *DnsAccountantSession) DefaultCount() (*big.Int, error) {
	return _DnsAccountant.Contract.DefaultCount(&_DnsAccountant.CallOpts)
}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_DnsAccountant *DnsAccountantCallerSession) DefaultCount() (*big.Int, error) {
	return _DnsAccountant.Contract.DefaultCount(&_DnsAccountant.CallOpts)
}

// DnsTop is a free data retrieval call binding the contract method 0xf3c8bb0c.
//
// Solidity: function dnsTop() view returns(address)
func (_DnsAccountant *DnsAccountantCaller) DnsTop(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "dnsTop")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DnsTop is a free data retrieval call binding the contract method 0xf3c8bb0c.
//
// Solidity: function dnsTop() view returns(address)
func (_DnsAccountant *DnsAccountantSession) DnsTop() (common.Address, error) {
	return _DnsAccountant.Contract.DnsTop(&_DnsAccountant.CallOpts)
}

// DnsTop is a free data retrieval call binding the contract method 0xf3c8bb0c.
//
// Solidity: function dnsTop() view returns(address)
func (_DnsAccountant *DnsAccountantCallerSession) DnsTop() (common.Address, error) {
	return _DnsAccountant.Contract.DnsTop(&_DnsAccountant.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0xd81e8423.
//
// Solidity: function get(address account_, address erc20Addr_) view returns(uint256)
func (_DnsAccountant *DnsAccountantCaller) Get(opts *bind.CallOpts, account_ common.Address, erc20Addr_ common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "get", account_, erc20Addr_)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xd81e8423.
//
// Solidity: function get(address account_, address erc20Addr_) view returns(uint256)
func (_DnsAccountant *DnsAccountantSession) Get(account_ common.Address, erc20Addr_ common.Address) (*big.Int, error) {
	return _DnsAccountant.Contract.Get(&_DnsAccountant.CallOpts, account_, erc20Addr_)
}

// Get is a free data retrieval call binding the contract method 0xd81e8423.
//
// Solidity: function get(address account_, address erc20Addr_) view returns(uint256)
func (_DnsAccountant *DnsAccountantCallerSession) Get(account_ common.Address, erc20Addr_ common.Address) (*big.Int, error) {
	return _DnsAccountant.Contract.Get(&_DnsAccountant.CallOpts, account_, erc20Addr_)
}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCaller) GetAllTask(opts *bind.CallOpts, contractAddr_ common.Address) ([]byte, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getAllTask", contractAddr_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantSession) GetAllTask(contractAddr_ common.Address) ([]byte, error) {
	return _DnsAccountant.Contract.GetAllTask(&_DnsAccountant.CallOpts, contractAddr_)
}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCallerSession) GetAllTask(contractAddr_ common.Address) ([]byte, error) {
	return _DnsAccountant.Contract.GetAllTask(&_DnsAccountant.CallOpts, contractAddr_)
}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_DnsAccountant *DnsAccountantCaller) GetContractList(opts *bind.CallOpts, signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getContractList", signer_, idx_)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new([8]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([8]common.Address)).(*[8]common.Address)

	return out0, out1, out2, err

}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_DnsAccountant *DnsAccountantSession) GetContractList(signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	return _DnsAccountant.Contract.GetContractList(&_DnsAccountant.CallOpts, signer_, idx_)
}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_DnsAccountant *DnsAccountantCallerSession) GetContractList(signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	return _DnsAccountant.Contract.GetContractList(&_DnsAccountant.CallOpts, signer_, idx_)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_DnsAccountant *DnsAccountantCaller) GetSafeSig(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getSafeSig", contractAddr_, hash_, candidate_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_DnsAccountant *DnsAccountantSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _DnsAccountant.Contract.GetSafeSig(&_DnsAccountant.CallOpts, contractAddr_, hash_, candidate_)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_DnsAccountant *DnsAccountantCallerSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _DnsAccountant.Contract.GetSafeSig(&_DnsAccountant.CallOpts, contractAddr_, hash_, candidate_)
}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCaller) GetSignerSetAddress(opts *bind.CallOpts, contractAddr_ common.Address) ([]byte, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getSignerSetAddress", contractAddr_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantSession) GetSignerSetAddress(contractAddr_ common.Address) ([]byte, error) {
	return _DnsAccountant.Contract.GetSignerSetAddress(&_DnsAccountant.CallOpts, contractAddr_)
}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCallerSession) GetSignerSetAddress(contractAddr_ common.Address) ([]byte, error) {
	return _DnsAccountant.Contract.GetSignerSetAddress(&_DnsAccountant.CallOpts, contractAddr_)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_DnsAccountant *DnsAccountantCaller) GetTaskInfo(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getTaskInfo", contractAddr_, hash_)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return out0, out1, out2, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_DnsAccountant *DnsAccountantSession) GetTaskInfo(contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	return _DnsAccountant.Contract.GetTaskInfo(&_DnsAccountant.CallOpts, contractAddr_, hash_)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_DnsAccountant *DnsAccountantCallerSession) GetTaskInfo(contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	return _DnsAccountant.Contract.GetTaskInfo(&_DnsAccountant.CallOpts, contractAddr_, hash_)
}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCaller) GetTaskSignerSetAddress(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "getTaskSignerSetAddress", contractAddr_, hash_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_DnsAccountant *DnsAccountantSession) GetTaskSignerSetAddress(contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	return _DnsAccountant.Contract.GetTaskSignerSetAddress(&_DnsAccountant.CallOpts, contractAddr_, hash_)
}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_DnsAccountant *DnsAccountantCallerSession) GetTaskSignerSetAddress(contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	return _DnsAccountant.Contract.GetTaskSignerSetAddress(&_DnsAccountant.CallOpts, contractAddr_, hash_)
}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_DnsAccountant *DnsAccountantCaller) MultiSignerStore(opts *bind.CallOpts, arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	var out []interface{}
	err := _DnsAccountant.contract.Call(opts, &out, "multiSignerStore", arg0)

	outstruct := new(struct {
		Work        bool
		Lock        bool
		SignerCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Work = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Lock = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.SignerCount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_DnsAccountant *DnsAccountantSession) MultiSignerStore(arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	return _DnsAccountant.Contract.MultiSignerStore(&_DnsAccountant.CallOpts, arg0)
}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_DnsAccountant *DnsAccountantCallerSession) MultiSignerStore(arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	return _DnsAccountant.Contract.MultiSignerStore(&_DnsAccountant.CallOpts, arg0)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantTransactor) AddSigner(opts *bind.TransactOpts, contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "addSigner", contractAddr_, signer_)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantSession) AddSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.AddSigner(&_DnsAccountant.TransactOpts, contractAddr_, signer_)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) AddSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.AddSigner(&_DnsAccountant.TransactOpts, contractAddr_, signer_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactor) CloseMultiSig(opts *bind.TransactOpts, contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "closeMultiSig", contractAddr_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantSession) CloseMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.CloseMultiSig(&_DnsAccountant.TransactOpts, contractAddr_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) CloseMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.CloseMultiSig(&_DnsAccountant.TransactOpts, contractAddr_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantTransactor) DelSigner(opts *bind.TransactOpts, contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "delSigner", contractAddr_, signer_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantSession) DelSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.DelSigner(&_DnsAccountant.TransactOpts, contractAddr_, signer_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) DelSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.DelSigner(&_DnsAccountant.TransactOpts, contractAddr_, signer_)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_DnsAccountant *DnsAccountantTransactor) Deposit(opts *bind.TransactOpts, contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "deposit", contractAddr_, erc20Addr_, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_DnsAccountant *DnsAccountantSession) Deposit(contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _DnsAccountant.Contract.Deposit(&_DnsAccountant.TransactOpts, contractAddr_, erc20Addr_, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) Deposit(contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _DnsAccountant.Contract.Deposit(&_DnsAccountant.TransactOpts, contractAddr_, erc20Addr_, amount_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactor) OpenMultiSig(opts *bind.TransactOpts, contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "openMultiSig", contractAddr_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantSession) OpenMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.OpenMultiSig(&_DnsAccountant.TransactOpts, contractAddr_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) OpenMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.OpenMultiSig(&_DnsAccountant.TransactOpts, contractAddr_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_DnsAccountant *DnsAccountantTransactor) RemoveSafeSig(opts *bind.TransactOpts, contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "removeSafeSig", contractAddr_, hash_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_DnsAccountant *DnsAccountantSession) RemoveSafeSig(contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _DnsAccountant.Contract.RemoveSafeSig(&_DnsAccountant.TransactOpts, contractAddr_, hash_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) RemoveSafeSig(contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _DnsAccountant.Contract.RemoveSafeSig(&_DnsAccountant.TransactOpts, contractAddr_, hash_)
}

// SetRelation is a paid mutator transaction binding the contract method 0x0868f7b1.
//
// Solidity: function setRelation(address dnsTop_) returns()
func (_DnsAccountant *DnsAccountantTransactor) SetRelation(opts *bind.TransactOpts, dnsTop_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "setRelation", dnsTop_)
}

// SetRelation is a paid mutator transaction binding the contract method 0x0868f7b1.
//
// Solidity: function setRelation(address dnsTop_) returns()
func (_DnsAccountant *DnsAccountantSession) SetRelation(dnsTop_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.SetRelation(&_DnsAccountant.TransactOpts, dnsTop_)
}

// SetRelation is a paid mutator transaction binding the contract method 0x0868f7b1.
//
// Solidity: function setRelation(address dnsTop_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) SetRelation(dnsTop_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.SetRelation(&_DnsAccountant.TransactOpts, dnsTop_)
}

// WithdrawCash is a paid mutator transaction binding the contract method 0x47fd8e7d.
//
// Solidity: function withdrawCash(address erc20Addr_, uint256 amount_, address out_, address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactor) WithdrawCash(opts *bind.TransactOpts, erc20Addr_ common.Address, amount_ *big.Int, out_ common.Address, contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.contract.Transact(opts, "withdrawCash", erc20Addr_, amount_, out_, contractAddr_)
}

// WithdrawCash is a paid mutator transaction binding the contract method 0x47fd8e7d.
//
// Solidity: function withdrawCash(address erc20Addr_, uint256 amount_, address out_, address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantSession) WithdrawCash(erc20Addr_ common.Address, amount_ *big.Int, out_ common.Address, contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.WithdrawCash(&_DnsAccountant.TransactOpts, erc20Addr_, amount_, out_, contractAddr_)
}

// WithdrawCash is a paid mutator transaction binding the contract method 0x47fd8e7d.
//
// Solidity: function withdrawCash(address erc20Addr_, uint256 amount_, address out_, address contractAddr_) returns()
func (_DnsAccountant *DnsAccountantTransactorSession) WithdrawCash(erc20Addr_ common.Address, amount_ *big.Int, out_ common.Address, contractAddr_ common.Address) (*types.Transaction, error) {
	return _DnsAccountant.Contract.WithdrawCash(&_DnsAccountant.TransactOpts, erc20Addr_, amount_, out_, contractAddr_)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DnsAccountant *DnsAccountantTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _DnsAccountant.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DnsAccountant *DnsAccountantSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _DnsAccountant.Contract.Fallback(&_DnsAccountant.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_DnsAccountant *DnsAccountantTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _DnsAccountant.Contract.Fallback(&_DnsAccountant.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DnsAccountant *DnsAccountantTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DnsAccountant.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DnsAccountant *DnsAccountantSession) Receive() (*types.Transaction, error) {
	return _DnsAccountant.Contract.Receive(&_DnsAccountant.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_DnsAccountant *DnsAccountantTransactorSession) Receive() (*types.Transaction, error) {
	return _DnsAccountant.Contract.Receive(&_DnsAccountant.TransactOpts)
}

// DnsAccountantEvDepositIterator is returned from FilterEvDeposit and is used to iterate over the raw logs and unpacked data for EvDeposit events raised by the DnsAccountant contract.
type DnsAccountantEvDepositIterator struct {
	Event *DnsAccountantEvDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DnsAccountantEvDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DnsAccountantEvDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DnsAccountantEvDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DnsAccountantEvDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DnsAccountantEvDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DnsAccountantEvDeposit represents a EvDeposit event raised by the DnsAccountant contract.
type DnsAccountantEvDeposit struct {
	Operator     common.Address
	ContractAddr common.Address
	Erc20Addr    common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterEvDeposit is a free log retrieval operation binding the contract event 0x5e8655bc31e2c8e8d0e80adca4302fafb5ec9320198d3221616d9214c1304601.
//
// Solidity: event EvDeposit(address operator, address contractAddr, address erc20Addr, uint256 amount)
func (_DnsAccountant *DnsAccountantFilterer) FilterEvDeposit(opts *bind.FilterOpts) (*DnsAccountantEvDepositIterator, error) {

	logs, sub, err := _DnsAccountant.contract.FilterLogs(opts, "EvDeposit")
	if err != nil {
		return nil, err
	}
	return &DnsAccountantEvDepositIterator{contract: _DnsAccountant.contract, event: "EvDeposit", logs: logs, sub: sub}, nil
}

// WatchEvDeposit is a free log subscription operation binding the contract event 0x5e8655bc31e2c8e8d0e80adca4302fafb5ec9320198d3221616d9214c1304601.
//
// Solidity: event EvDeposit(address operator, address contractAddr, address erc20Addr, uint256 amount)
func (_DnsAccountant *DnsAccountantFilterer) WatchEvDeposit(opts *bind.WatchOpts, sink chan<- *DnsAccountantEvDeposit) (event.Subscription, error) {

	logs, sub, err := _DnsAccountant.contract.WatchLogs(opts, "EvDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DnsAccountantEvDeposit)
				if err := _DnsAccountant.contract.UnpackLog(event, "EvDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvDeposit is a log parse operation binding the contract event 0x5e8655bc31e2c8e8d0e80adca4302fafb5ec9320198d3221616d9214c1304601.
//
// Solidity: event EvDeposit(address operator, address contractAddr, address erc20Addr, uint256 amount)
func (_DnsAccountant *DnsAccountantFilterer) ParseEvDeposit(log types.Log) (*DnsAccountantEvDeposit, error) {
	event := new(DnsAccountantEvDeposit)
	if err := _DnsAccountant.contract.UnpackLog(event, "EvDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DnsAccountantEvWithdrawCashIterator is returned from FilterEvWithdrawCash and is used to iterate over the raw logs and unpacked data for EvWithdrawCash events raised by the DnsAccountant contract.
type DnsAccountantEvWithdrawCashIterator struct {
	Event *DnsAccountantEvWithdrawCash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DnsAccountantEvWithdrawCashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DnsAccountantEvWithdrawCash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DnsAccountantEvWithdrawCash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DnsAccountantEvWithdrawCashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DnsAccountantEvWithdrawCashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DnsAccountantEvWithdrawCash represents a EvWithdrawCash event raised by the DnsAccountant contract.
type DnsAccountantEvWithdrawCash struct {
	Operator     common.Address
	Erc20Addr    common.Address
	Amount       *big.Int
	Out          common.Address
	ContractAddr common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterEvWithdrawCash is a free log retrieval operation binding the contract event 0x0a9c814dc547650550ef7ab0ca47351429be4f6d9556f7039a7652799f098d78.
//
// Solidity: event EvWithdrawCash(address operator, address erc20Addr, uint256 amount, address out, address contractAddr)
func (_DnsAccountant *DnsAccountantFilterer) FilterEvWithdrawCash(opts *bind.FilterOpts) (*DnsAccountantEvWithdrawCashIterator, error) {

	logs, sub, err := _DnsAccountant.contract.FilterLogs(opts, "EvWithdrawCash")
	if err != nil {
		return nil, err
	}
	return &DnsAccountantEvWithdrawCashIterator{contract: _DnsAccountant.contract, event: "EvWithdrawCash", logs: logs, sub: sub}, nil
}

// WatchEvWithdrawCash is a free log subscription operation binding the contract event 0x0a9c814dc547650550ef7ab0ca47351429be4f6d9556f7039a7652799f098d78.
//
// Solidity: event EvWithdrawCash(address operator, address erc20Addr, uint256 amount, address out, address contractAddr)
func (_DnsAccountant *DnsAccountantFilterer) WatchEvWithdrawCash(opts *bind.WatchOpts, sink chan<- *DnsAccountantEvWithdrawCash) (event.Subscription, error) {

	logs, sub, err := _DnsAccountant.contract.WatchLogs(opts, "EvWithdrawCash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DnsAccountantEvWithdrawCash)
				if err := _DnsAccountant.contract.UnpackLog(event, "EvWithdrawCash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvWithdrawCash is a log parse operation binding the contract event 0x0a9c814dc547650550ef7ab0ca47351429be4f6d9556f7039a7652799f098d78.
//
// Solidity: event EvWithdrawCash(address operator, address erc20Addr, uint256 amount, address out, address contractAddr)
func (_DnsAccountant *DnsAccountantFilterer) ParseEvWithdrawCash(log types.Log) (*DnsAccountantEvWithdrawCash, error) {
	event := new(DnsAccountantEvWithdrawCash)
	if err := _DnsAccountant.contract.UnpackLog(event, "EvWithdrawCash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc721OwnerMetaData contains all meta data concerning the Erc721Owner contract.
var Erc721OwnerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721Owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"erc721Owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"erc721Owner_\",\"type\":\"address\"}],\"name\":\"transferErc721Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040516105f93803806105f9833981810160405281019061003291906100cf565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b6000815190506100c981610146565b92915050565b600080604083850312156100e6576100e5610141565b5b60006100f4858286016100ba565b9250506020610105858286016100ba565b9150509250929050565b600061011a82610121565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61014f8161010f565b811461015a57600080fd5b50565b61048d8061016c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332cdee7b146100515780638da5cb5b1461006f578063c93f5e261461008d578063f2fde38b146100a9575b600080fd5b6100596100c5565b604051610066919061034b565b60405180910390f35b6100776100e9565b604051610084919061034b565b60405180910390f35b6100a760048036038101906100a291906102c9565b61010f565b005b6100c360048036038101906100be91906102c9565b6101e2565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019690610366565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026790610386565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506102c381610440565b92915050565b6000602082840312156102df576102de6103e9565b5b60006102ed848285016102b4565b91505092915050565b6102ff816103b7565b82525050565b6000610312600d836103a6565b915061031d826103ee565b602082019050919050565b6000610335600b836103a6565b915061034082610417565b602082019050919050565b600060208201905061036060008301846102f6565b92915050565b6000602082019050818103600083015261037f81610305565b9050919050565b6000602082019050818103600083015261039f81610328565b9050919050565b600082825260208201905092915050565b60006103c2826103c9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f6e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b7f6e6f7420616c6c6f776564000000000000000000000000000000000000000000600082015250565b610449816103b7565b811461045457600080fd5b5056fea264697066735822122070e40e7296b29e7ecc7b1d1664dc66ebc2117e6fa0da6d16498637c51748c51d64736f6c63430008060033",
}

// Erc721OwnerABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc721OwnerMetaData.ABI instead.
var Erc721OwnerABI = Erc721OwnerMetaData.ABI

// Erc721OwnerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc721OwnerMetaData.Bin instead.
var Erc721OwnerBin = Erc721OwnerMetaData.Bin

// DeployErc721Owner deploys a new Ethereum contract, binding an instance of Erc721Owner to it.
func DeployErc721Owner(auth *bind.TransactOpts, backend bind.ContractBackend, owner_ common.Address, erc721Owner_ common.Address) (common.Address, *types.Transaction, *Erc721Owner, error) {
	parsed, err := Erc721OwnerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc721OwnerBin), backend, owner_, erc721Owner_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc721Owner{Erc721OwnerCaller: Erc721OwnerCaller{contract: contract}, Erc721OwnerTransactor: Erc721OwnerTransactor{contract: contract}, Erc721OwnerFilterer: Erc721OwnerFilterer{contract: contract}}, nil
}

// Erc721Owner is an auto generated Go binding around an Ethereum contract.
type Erc721Owner struct {
	Erc721OwnerCaller     // Read-only binding to the contract
	Erc721OwnerTransactor // Write-only binding to the contract
	Erc721OwnerFilterer   // Log filterer for contract events
}

// Erc721OwnerCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc721OwnerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc721OwnerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc721OwnerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc721OwnerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc721OwnerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc721OwnerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc721OwnerSession struct {
	Contract     *Erc721Owner      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc721OwnerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc721OwnerCallerSession struct {
	Contract *Erc721OwnerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// Erc721OwnerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc721OwnerTransactorSession struct {
	Contract     *Erc721OwnerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// Erc721OwnerRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc721OwnerRaw struct {
	Contract *Erc721Owner // Generic contract binding to access the raw methods on
}

// Erc721OwnerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc721OwnerCallerRaw struct {
	Contract *Erc721OwnerCaller // Generic read-only contract binding to access the raw methods on
}

// Erc721OwnerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc721OwnerTransactorRaw struct {
	Contract *Erc721OwnerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc721Owner creates a new instance of Erc721Owner, bound to a specific deployed contract.
func NewErc721Owner(address common.Address, backend bind.ContractBackend) (*Erc721Owner, error) {
	contract, err := bindErc721Owner(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc721Owner{Erc721OwnerCaller: Erc721OwnerCaller{contract: contract}, Erc721OwnerTransactor: Erc721OwnerTransactor{contract: contract}, Erc721OwnerFilterer: Erc721OwnerFilterer{contract: contract}}, nil
}

// NewErc721OwnerCaller creates a new read-only instance of Erc721Owner, bound to a specific deployed contract.
func NewErc721OwnerCaller(address common.Address, caller bind.ContractCaller) (*Erc721OwnerCaller, error) {
	contract, err := bindErc721Owner(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc721OwnerCaller{contract: contract}, nil
}

// NewErc721OwnerTransactor creates a new write-only instance of Erc721Owner, bound to a specific deployed contract.
func NewErc721OwnerTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc721OwnerTransactor, error) {
	contract, err := bindErc721Owner(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc721OwnerTransactor{contract: contract}, nil
}

// NewErc721OwnerFilterer creates a new log filterer instance of Erc721Owner, bound to a specific deployed contract.
func NewErc721OwnerFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc721OwnerFilterer, error) {
	contract, err := bindErc721Owner(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc721OwnerFilterer{contract: contract}, nil
}

// bindErc721Owner binds a generic wrapper to an already deployed contract.
func bindErc721Owner(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Erc721OwnerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc721Owner *Erc721OwnerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc721Owner.Contract.Erc721OwnerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc721Owner *Erc721OwnerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc721Owner.Contract.Erc721OwnerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc721Owner *Erc721OwnerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc721Owner.Contract.Erc721OwnerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc721Owner *Erc721OwnerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc721Owner.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc721Owner *Erc721OwnerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc721Owner.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc721Owner *Erc721OwnerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc721Owner.Contract.contract.Transact(opts, method, params...)
}

// Erc721Owner is a free data retrieval call binding the contract method 0x32cdee7b.
//
// Solidity: function erc721Owner() view returns(address)
func (_Erc721Owner *Erc721OwnerCaller) Erc721Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc721Owner.contract.Call(opts, &out, "erc721Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Erc721Owner is a free data retrieval call binding the contract method 0x32cdee7b.
//
// Solidity: function erc721Owner() view returns(address)
func (_Erc721Owner *Erc721OwnerSession) Erc721Owner() (common.Address, error) {
	return _Erc721Owner.Contract.Erc721Owner(&_Erc721Owner.CallOpts)
}

// Erc721Owner is a free data retrieval call binding the contract method 0x32cdee7b.
//
// Solidity: function erc721Owner() view returns(address)
func (_Erc721Owner *Erc721OwnerCallerSession) Erc721Owner() (common.Address, error) {
	return _Erc721Owner.Contract.Erc721Owner(&_Erc721Owner.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc721Owner *Erc721OwnerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc721Owner.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc721Owner *Erc721OwnerSession) Owner() (common.Address, error) {
	return _Erc721Owner.Contract.Owner(&_Erc721Owner.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc721Owner *Erc721OwnerCallerSession) Owner() (common.Address, error) {
	return _Erc721Owner.Contract.Owner(&_Erc721Owner.CallOpts)
}

// TransferErc721Owner is a paid mutator transaction binding the contract method 0xc93f5e26.
//
// Solidity: function transferErc721Owner(address erc721Owner_) returns()
func (_Erc721Owner *Erc721OwnerTransactor) TransferErc721Owner(opts *bind.TransactOpts, erc721Owner_ common.Address) (*types.Transaction, error) {
	return _Erc721Owner.contract.Transact(opts, "transferErc721Owner", erc721Owner_)
}

// TransferErc721Owner is a paid mutator transaction binding the contract method 0xc93f5e26.
//
// Solidity: function transferErc721Owner(address erc721Owner_) returns()
func (_Erc721Owner *Erc721OwnerSession) TransferErc721Owner(erc721Owner_ common.Address) (*types.Transaction, error) {
	return _Erc721Owner.Contract.TransferErc721Owner(&_Erc721Owner.TransactOpts, erc721Owner_)
}

// TransferErc721Owner is a paid mutator transaction binding the contract method 0xc93f5e26.
//
// Solidity: function transferErc721Owner(address erc721Owner_) returns()
func (_Erc721Owner *Erc721OwnerTransactorSession) TransferErc721Owner(erc721Owner_ common.Address) (*types.Transaction, error) {
	return _Erc721Owner.Contract.TransferErc721Owner(&_Erc721Owner.TransactOpts, erc721Owner_)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc721Owner *Erc721OwnerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc721Owner.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc721Owner *Erc721OwnerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc721Owner.Contract.TransferOwnership(&_Erc721Owner.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc721Owner *Erc721OwnerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc721Owner.Contract.TransferOwnership(&_Erc721Owner.TransactOpts, newOwner)
}

// IDnsAccountantMetaData contains all meta data concerning the IDnsAccountant contract.
var IDnsAccountantMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IDnsAccountantABI is the input ABI used to generate the binding from.
// Deprecated: Use IDnsAccountantMetaData.ABI instead.
var IDnsAccountantABI = IDnsAccountantMetaData.ABI

// IDnsAccountant is an auto generated Go binding around an Ethereum contract.
type IDnsAccountant struct {
	IDnsAccountantCaller     // Read-only binding to the contract
	IDnsAccountantTransactor // Write-only binding to the contract
	IDnsAccountantFilterer   // Log filterer for contract events
}

// IDnsAccountantCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDnsAccountantCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsAccountantTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDnsAccountantTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsAccountantFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDnsAccountantFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsAccountantSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDnsAccountantSession struct {
	Contract     *IDnsAccountant   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDnsAccountantCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDnsAccountantCallerSession struct {
	Contract *IDnsAccountantCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IDnsAccountantTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDnsAccountantTransactorSession struct {
	Contract     *IDnsAccountantTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IDnsAccountantRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDnsAccountantRaw struct {
	Contract *IDnsAccountant // Generic contract binding to access the raw methods on
}

// IDnsAccountantCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDnsAccountantCallerRaw struct {
	Contract *IDnsAccountantCaller // Generic read-only contract binding to access the raw methods on
}

// IDnsAccountantTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDnsAccountantTransactorRaw struct {
	Contract *IDnsAccountantTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDnsAccountant creates a new instance of IDnsAccountant, bound to a specific deployed contract.
func NewIDnsAccountant(address common.Address, backend bind.ContractBackend) (*IDnsAccountant, error) {
	contract, err := bindIDnsAccountant(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDnsAccountant{IDnsAccountantCaller: IDnsAccountantCaller{contract: contract}, IDnsAccountantTransactor: IDnsAccountantTransactor{contract: contract}, IDnsAccountantFilterer: IDnsAccountantFilterer{contract: contract}}, nil
}

// NewIDnsAccountantCaller creates a new read-only instance of IDnsAccountant, bound to a specific deployed contract.
func NewIDnsAccountantCaller(address common.Address, caller bind.ContractCaller) (*IDnsAccountantCaller, error) {
	contract, err := bindIDnsAccountant(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsAccountantCaller{contract: contract}, nil
}

// NewIDnsAccountantTransactor creates a new write-only instance of IDnsAccountant, bound to a specific deployed contract.
func NewIDnsAccountantTransactor(address common.Address, transactor bind.ContractTransactor) (*IDnsAccountantTransactor, error) {
	contract, err := bindIDnsAccountant(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsAccountantTransactor{contract: contract}, nil
}

// NewIDnsAccountantFilterer creates a new log filterer instance of IDnsAccountant, bound to a specific deployed contract.
func NewIDnsAccountantFilterer(address common.Address, filterer bind.ContractFilterer) (*IDnsAccountantFilterer, error) {
	contract, err := bindIDnsAccountant(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDnsAccountantFilterer{contract: contract}, nil
}

// bindIDnsAccountant binds a generic wrapper to an already deployed contract.
func bindIDnsAccountant(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDnsAccountantABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsAccountant *IDnsAccountantRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsAccountant.Contract.IDnsAccountantCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsAccountant *IDnsAccountantRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.IDnsAccountantTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsAccountant *IDnsAccountantRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.IDnsAccountantTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsAccountant *IDnsAccountantCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsAccountant.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsAccountant *IDnsAccountantTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsAccountant *IDnsAccountantTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.contract.Transact(opts, method, params...)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_IDnsAccountant *IDnsAccountantTransactor) Deposit(opts *bind.TransactOpts, contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _IDnsAccountant.contract.Transact(opts, "deposit", contractAddr_, erc20Addr_, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_IDnsAccountant *IDnsAccountantSession) Deposit(contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.Deposit(&_IDnsAccountant.TransactOpts, contractAddr_, erc20Addr_, amount_)
}

// Deposit is a paid mutator transaction binding the contract method 0x8340f549.
//
// Solidity: function deposit(address contractAddr_, address erc20Addr_, uint256 amount_) returns()
func (_IDnsAccountant *IDnsAccountantTransactorSession) Deposit(contractAddr_ common.Address, erc20Addr_ common.Address, amount_ *big.Int) (*types.Transaction, error) {
	return _IDnsAccountant.Contract.Deposit(&_IDnsAccountant.TransactOpts, contractAddr_, erc20Addr_, amount_)
}

// IDnsErc721OwnerMetaData contains all meta data concerning the IDnsErc721Owner contract.
var IDnsErc721OwnerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IDnsErc721OwnerABI is the input ABI used to generate the binding from.
// Deprecated: Use IDnsErc721OwnerMetaData.ABI instead.
var IDnsErc721OwnerABI = IDnsErc721OwnerMetaData.ABI

// IDnsErc721Owner is an auto generated Go binding around an Ethereum contract.
type IDnsErc721Owner struct {
	IDnsErc721OwnerCaller     // Read-only binding to the contract
	IDnsErc721OwnerTransactor // Write-only binding to the contract
	IDnsErc721OwnerFilterer   // Log filterer for contract events
}

// IDnsErc721OwnerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDnsErc721OwnerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsErc721OwnerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDnsErc721OwnerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsErc721OwnerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDnsErc721OwnerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsErc721OwnerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDnsErc721OwnerSession struct {
	Contract     *IDnsErc721Owner  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDnsErc721OwnerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDnsErc721OwnerCallerSession struct {
	Contract *IDnsErc721OwnerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IDnsErc721OwnerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDnsErc721OwnerTransactorSession struct {
	Contract     *IDnsErc721OwnerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IDnsErc721OwnerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDnsErc721OwnerRaw struct {
	Contract *IDnsErc721Owner // Generic contract binding to access the raw methods on
}

// IDnsErc721OwnerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDnsErc721OwnerCallerRaw struct {
	Contract *IDnsErc721OwnerCaller // Generic read-only contract binding to access the raw methods on
}

// IDnsErc721OwnerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDnsErc721OwnerTransactorRaw struct {
	Contract *IDnsErc721OwnerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDnsErc721Owner creates a new instance of IDnsErc721Owner, bound to a specific deployed contract.
func NewIDnsErc721Owner(address common.Address, backend bind.ContractBackend) (*IDnsErc721Owner, error) {
	contract, err := bindIDnsErc721Owner(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDnsErc721Owner{IDnsErc721OwnerCaller: IDnsErc721OwnerCaller{contract: contract}, IDnsErc721OwnerTransactor: IDnsErc721OwnerTransactor{contract: contract}, IDnsErc721OwnerFilterer: IDnsErc721OwnerFilterer{contract: contract}}, nil
}

// NewIDnsErc721OwnerCaller creates a new read-only instance of IDnsErc721Owner, bound to a specific deployed contract.
func NewIDnsErc721OwnerCaller(address common.Address, caller bind.ContractCaller) (*IDnsErc721OwnerCaller, error) {
	contract, err := bindIDnsErc721Owner(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsErc721OwnerCaller{contract: contract}, nil
}

// NewIDnsErc721OwnerTransactor creates a new write-only instance of IDnsErc721Owner, bound to a specific deployed contract.
func NewIDnsErc721OwnerTransactor(address common.Address, transactor bind.ContractTransactor) (*IDnsErc721OwnerTransactor, error) {
	contract, err := bindIDnsErc721Owner(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsErc721OwnerTransactor{contract: contract}, nil
}

// NewIDnsErc721OwnerFilterer creates a new log filterer instance of IDnsErc721Owner, bound to a specific deployed contract.
func NewIDnsErc721OwnerFilterer(address common.Address, filterer bind.ContractFilterer) (*IDnsErc721OwnerFilterer, error) {
	contract, err := bindIDnsErc721Owner(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDnsErc721OwnerFilterer{contract: contract}, nil
}

// bindIDnsErc721Owner binds a generic wrapper to an already deployed contract.
func bindIDnsErc721Owner(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDnsErc721OwnerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsErc721Owner *IDnsErc721OwnerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsErc721Owner.Contract.IDnsErc721OwnerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsErc721Owner *IDnsErc721OwnerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.IDnsErc721OwnerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsErc721Owner *IDnsErc721OwnerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.IDnsErc721OwnerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsErc721Owner *IDnsErc721OwnerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsErc721Owner.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsErc721Owner *IDnsErc721OwnerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsErc721Owner *IDnsErc721OwnerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.contract.Transact(opts, method, params...)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IDnsErc721Owner *IDnsErc721OwnerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IDnsErc721Owner.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IDnsErc721Owner *IDnsErc721OwnerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.TransferOwnership(&_IDnsErc721Owner.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IDnsErc721Owner *IDnsErc721OwnerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IDnsErc721Owner.Contract.TransferOwnership(&_IDnsErc721Owner.TransactOpts, newOwner)
}

// IDnsTopLevelNameMetaData contains all meta data concerning the IDnsTopLevelName contract.
var IDnsTopLevelNameMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fatherHash\",\"type\":\"bytes32\"}],\"name\":\"getErc721Contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IDnsTopLevelNameABI is the input ABI used to generate the binding from.
// Deprecated: Use IDnsTopLevelNameMetaData.ABI instead.
var IDnsTopLevelNameABI = IDnsTopLevelNameMetaData.ABI

// IDnsTopLevelName is an auto generated Go binding around an Ethereum contract.
type IDnsTopLevelName struct {
	IDnsTopLevelNameCaller     // Read-only binding to the contract
	IDnsTopLevelNameTransactor // Write-only binding to the contract
	IDnsTopLevelNameFilterer   // Log filterer for contract events
}

// IDnsTopLevelNameCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDnsTopLevelNameCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsTopLevelNameTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDnsTopLevelNameTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsTopLevelNameFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDnsTopLevelNameFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDnsTopLevelNameSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDnsTopLevelNameSession struct {
	Contract     *IDnsTopLevelName // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IDnsTopLevelNameCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDnsTopLevelNameCallerSession struct {
	Contract *IDnsTopLevelNameCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IDnsTopLevelNameTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDnsTopLevelNameTransactorSession struct {
	Contract     *IDnsTopLevelNameTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IDnsTopLevelNameRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDnsTopLevelNameRaw struct {
	Contract *IDnsTopLevelName // Generic contract binding to access the raw methods on
}

// IDnsTopLevelNameCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDnsTopLevelNameCallerRaw struct {
	Contract *IDnsTopLevelNameCaller // Generic read-only contract binding to access the raw methods on
}

// IDnsTopLevelNameTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDnsTopLevelNameTransactorRaw struct {
	Contract *IDnsTopLevelNameTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDnsTopLevelName creates a new instance of IDnsTopLevelName, bound to a specific deployed contract.
func NewIDnsTopLevelName(address common.Address, backend bind.ContractBackend) (*IDnsTopLevelName, error) {
	contract, err := bindIDnsTopLevelName(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDnsTopLevelName{IDnsTopLevelNameCaller: IDnsTopLevelNameCaller{contract: contract}, IDnsTopLevelNameTransactor: IDnsTopLevelNameTransactor{contract: contract}, IDnsTopLevelNameFilterer: IDnsTopLevelNameFilterer{contract: contract}}, nil
}

// NewIDnsTopLevelNameCaller creates a new read-only instance of IDnsTopLevelName, bound to a specific deployed contract.
func NewIDnsTopLevelNameCaller(address common.Address, caller bind.ContractCaller) (*IDnsTopLevelNameCaller, error) {
	contract, err := bindIDnsTopLevelName(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsTopLevelNameCaller{contract: contract}, nil
}

// NewIDnsTopLevelNameTransactor creates a new write-only instance of IDnsTopLevelName, bound to a specific deployed contract.
func NewIDnsTopLevelNameTransactor(address common.Address, transactor bind.ContractTransactor) (*IDnsTopLevelNameTransactor, error) {
	contract, err := bindIDnsTopLevelName(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDnsTopLevelNameTransactor{contract: contract}, nil
}

// NewIDnsTopLevelNameFilterer creates a new log filterer instance of IDnsTopLevelName, bound to a specific deployed contract.
func NewIDnsTopLevelNameFilterer(address common.Address, filterer bind.ContractFilterer) (*IDnsTopLevelNameFilterer, error) {
	contract, err := bindIDnsTopLevelName(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDnsTopLevelNameFilterer{contract: contract}, nil
}

// bindIDnsTopLevelName binds a generic wrapper to an already deployed contract.
func bindIDnsTopLevelName(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDnsTopLevelNameABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsTopLevelName *IDnsTopLevelNameRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsTopLevelName.Contract.IDnsTopLevelNameCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsTopLevelName *IDnsTopLevelNameRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsTopLevelName.Contract.IDnsTopLevelNameTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsTopLevelName *IDnsTopLevelNameRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsTopLevelName.Contract.IDnsTopLevelNameTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDnsTopLevelName *IDnsTopLevelNameCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDnsTopLevelName.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDnsTopLevelName *IDnsTopLevelNameTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDnsTopLevelName.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDnsTopLevelName *IDnsTopLevelNameTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDnsTopLevelName.Contract.contract.Transact(opts, method, params...)
}

// GetErc721Contract is a free data retrieval call binding the contract method 0x2c19be76.
//
// Solidity: function getErc721Contract(bytes32 fatherHash) view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameCaller) GetErc721Contract(opts *bind.CallOpts, fatherHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _IDnsTopLevelName.contract.Call(opts, &out, "getErc721Contract", fatherHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetErc721Contract is a free data retrieval call binding the contract method 0x2c19be76.
//
// Solidity: function getErc721Contract(bytes32 fatherHash) view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameSession) GetErc721Contract(fatherHash [32]byte) (common.Address, error) {
	return _IDnsTopLevelName.Contract.GetErc721Contract(&_IDnsTopLevelName.CallOpts, fatherHash)
}

// GetErc721Contract is a free data retrieval call binding the contract method 0x2c19be76.
//
// Solidity: function getErc721Contract(bytes32 fatherHash) view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameCallerSession) GetErc721Contract(fatherHash [32]byte) (common.Address, error) {
	return _IDnsTopLevelName.Contract.GetErc721Contract(&_IDnsTopLevelName.CallOpts, fatherHash)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IDnsTopLevelName.contract.Call(opts, &out, "getOperator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameSession) GetOperator() (common.Address, error) {
	return _IDnsTopLevelName.Contract.GetOperator(&_IDnsTopLevelName.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_IDnsTopLevelName *IDnsTopLevelNameCallerSession) GetOperator() (common.Address, error) {
	return _IDnsTopLevelName.Contract.GetOperator(&_IDnsTopLevelName.CallOpts)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, who common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", who)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(who common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address who) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(who common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, who)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, value)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMultiSigMetaData contains all meta data concerning the IMultiSig contract.
var IMultiSigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"candidate_\",\"type\":\"address\"}],\"name\":\"getSafeSig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IMultiSigABI is the input ABI used to generate the binding from.
// Deprecated: Use IMultiSigMetaData.ABI instead.
var IMultiSigABI = IMultiSigMetaData.ABI

// IMultiSig is an auto generated Go binding around an Ethereum contract.
type IMultiSig struct {
	IMultiSigCaller     // Read-only binding to the contract
	IMultiSigTransactor // Write-only binding to the contract
	IMultiSigFilterer   // Log filterer for contract events
}

// IMultiSigCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMultiSigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMultiSigTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMultiSigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMultiSigFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMultiSigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMultiSigSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMultiSigSession struct {
	Contract     *IMultiSig        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IMultiSigCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMultiSigCallerSession struct {
	Contract *IMultiSigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IMultiSigTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMultiSigTransactorSession struct {
	Contract     *IMultiSigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IMultiSigRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMultiSigRaw struct {
	Contract *IMultiSig // Generic contract binding to access the raw methods on
}

// IMultiSigCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMultiSigCallerRaw struct {
	Contract *IMultiSigCaller // Generic read-only contract binding to access the raw methods on
}

// IMultiSigTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMultiSigTransactorRaw struct {
	Contract *IMultiSigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMultiSig creates a new instance of IMultiSig, bound to a specific deployed contract.
func NewIMultiSig(address common.Address, backend bind.ContractBackend) (*IMultiSig, error) {
	contract, err := bindIMultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMultiSig{IMultiSigCaller: IMultiSigCaller{contract: contract}, IMultiSigTransactor: IMultiSigTransactor{contract: contract}, IMultiSigFilterer: IMultiSigFilterer{contract: contract}}, nil
}

// NewIMultiSigCaller creates a new read-only instance of IMultiSig, bound to a specific deployed contract.
func NewIMultiSigCaller(address common.Address, caller bind.ContractCaller) (*IMultiSigCaller, error) {
	contract, err := bindIMultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMultiSigCaller{contract: contract}, nil
}

// NewIMultiSigTransactor creates a new write-only instance of IMultiSig, bound to a specific deployed contract.
func NewIMultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*IMultiSigTransactor, error) {
	contract, err := bindIMultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMultiSigTransactor{contract: contract}, nil
}

// NewIMultiSigFilterer creates a new log filterer instance of IMultiSig, bound to a specific deployed contract.
func NewIMultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*IMultiSigFilterer, error) {
	contract, err := bindIMultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMultiSigFilterer{contract: contract}, nil
}

// bindIMultiSig binds a generic wrapper to an already deployed contract.
func bindIMultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IMultiSigABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMultiSig *IMultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMultiSig.Contract.IMultiSigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMultiSig *IMultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMultiSig.Contract.IMultiSigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMultiSig *IMultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMultiSig.Contract.IMultiSigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMultiSig *IMultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMultiSig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMultiSig *IMultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMultiSig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMultiSig *IMultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMultiSig.Contract.contract.Transact(opts, method, params...)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_IMultiSig *IMultiSigCaller) GetSafeSig(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	var out []interface{}
	err := _IMultiSig.contract.Call(opts, &out, "getSafeSig", contractAddr_, hash_, candidate_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_IMultiSig *IMultiSigSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _IMultiSig.Contract.GetSafeSig(&_IMultiSig.CallOpts, contractAddr_, hash_, candidate_)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_IMultiSig *IMultiSigCallerSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _IMultiSig.Contract.GetSafeSig(&_IMultiSig.CallOpts, contractAddr_, hash_, candidate_)
}

// LibAddressArrayMetaData contains all meta data concerning the LibAddressArray contract.
var LibAddressArrayMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6106f2610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806310b142d81461005057806395953da51461008e578063ec377009146100cb575b600080fd5b81801561005c57600080fd5b5061007760048036038101906100729190610470565b610108565b6040516100859291906104e9565b60405180910390f35b81801561009a57600080fd5b506100b560048036038101906100b09190610470565b61022c565b6040516100c29190610512565b60405180910390f35b8180156100d757600080fd5b506100f260048036038101906100ed9190610470565b6102a9565b6040516100ff91906104ce565b60405180910390f35b60008060005b84805490508110156101ab578373ffffffffffffffffffffffffffffffffffffffff168582815481106101445761014361065a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610198576000809250925050610225565b80806101a3906105b3565b91505061010e565b5083839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001808580549050610220919061052d565b915091505b9250929050565b600082829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183805490506102a1919061052d565b905092915050565b600080600090505b838054905081101561043a578273ffffffffffffffffffffffffffffffffffffffff168482815481106102e7576102e661065a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610427578360018580549050610340919061052d565b815481106103515761035061065a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828154811061038f5761038e61065a565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838054806103e8576103e761062b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556001915050610440565b8080610432906105b3565b9150506102b1565b50600090505b92915050565b6000813590506104558161068e565b92915050565b60008135905061046a816106a5565b92915050565b6000806040838503121561048757610486610689565b5b60006104958582860161045b565b92505060206104a685828601610446565b9150509250929050565b6104b98161057d565b82525050565b6104c8816105a9565b82525050565b60006020820190506104e360008301846104b0565b92915050565b60006040820190506104fe60008301856104b0565b61050b60208301846104bf565b9392505050565b600060208201905061052760008301846104bf565b92915050565b6000610538826105a9565b9150610543836105a9565b925082821015610556576105556105fc565b5b828203905092915050565b600061056c82610589565b9050919050565b6000819050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105be826105a9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105f1576105f06105fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b61069781610561565b81146106a257600080fd5b50565b6106ae81610573565b81146106b957600080fd5b5056fea264697066735822122094b62f15ef48e345daafc1dbd9bff2ee96f51b05b628901d35ad53b33f326da364736f6c63430008060033",
}

// LibAddressArrayABI is the input ABI used to generate the binding from.
// Deprecated: Use LibAddressArrayMetaData.ABI instead.
var LibAddressArrayABI = LibAddressArrayMetaData.ABI

// LibAddressArrayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibAddressArrayMetaData.Bin instead.
var LibAddressArrayBin = LibAddressArrayMetaData.Bin

// DeployLibAddressArray deploys a new Ethereum contract, binding an instance of LibAddressArray to it.
func DeployLibAddressArray(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LibAddressArray, error) {
	parsed, err := LibAddressArrayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibAddressArrayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LibAddressArray{LibAddressArrayCaller: LibAddressArrayCaller{contract: contract}, LibAddressArrayTransactor: LibAddressArrayTransactor{contract: contract}, LibAddressArrayFilterer: LibAddressArrayFilterer{contract: contract}}, nil
}

// LibAddressArray is an auto generated Go binding around an Ethereum contract.
type LibAddressArray struct {
	LibAddressArrayCaller     // Read-only binding to the contract
	LibAddressArrayTransactor // Write-only binding to the contract
	LibAddressArrayFilterer   // Log filterer for contract events
}

// LibAddressArrayCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibAddressArrayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibAddressArrayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibAddressArrayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibAddressArrayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibAddressArrayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibAddressArraySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibAddressArraySession struct {
	Contract     *LibAddressArray  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibAddressArrayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibAddressArrayCallerSession struct {
	Contract *LibAddressArrayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// LibAddressArrayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibAddressArrayTransactorSession struct {
	Contract     *LibAddressArrayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// LibAddressArrayRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibAddressArrayRaw struct {
	Contract *LibAddressArray // Generic contract binding to access the raw methods on
}

// LibAddressArrayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibAddressArrayCallerRaw struct {
	Contract *LibAddressArrayCaller // Generic read-only contract binding to access the raw methods on
}

// LibAddressArrayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibAddressArrayTransactorRaw struct {
	Contract *LibAddressArrayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibAddressArray creates a new instance of LibAddressArray, bound to a specific deployed contract.
func NewLibAddressArray(address common.Address, backend bind.ContractBackend) (*LibAddressArray, error) {
	contract, err := bindLibAddressArray(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LibAddressArray{LibAddressArrayCaller: LibAddressArrayCaller{contract: contract}, LibAddressArrayTransactor: LibAddressArrayTransactor{contract: contract}, LibAddressArrayFilterer: LibAddressArrayFilterer{contract: contract}}, nil
}

// NewLibAddressArrayCaller creates a new read-only instance of LibAddressArray, bound to a specific deployed contract.
func NewLibAddressArrayCaller(address common.Address, caller bind.ContractCaller) (*LibAddressArrayCaller, error) {
	contract, err := bindLibAddressArray(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibAddressArrayCaller{contract: contract}, nil
}

// NewLibAddressArrayTransactor creates a new write-only instance of LibAddressArray, bound to a specific deployed contract.
func NewLibAddressArrayTransactor(address common.Address, transactor bind.ContractTransactor) (*LibAddressArrayTransactor, error) {
	contract, err := bindLibAddressArray(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibAddressArrayTransactor{contract: contract}, nil
}

// NewLibAddressArrayFilterer creates a new log filterer instance of LibAddressArray, bound to a specific deployed contract.
func NewLibAddressArrayFilterer(address common.Address, filterer bind.ContractFilterer) (*LibAddressArrayFilterer, error) {
	contract, err := bindLibAddressArray(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibAddressArrayFilterer{contract: contract}, nil
}

// bindLibAddressArray binds a generic wrapper to an already deployed contract.
func bindLibAddressArray(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibAddressArrayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibAddressArray *LibAddressArrayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibAddressArray.Contract.LibAddressArrayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibAddressArray *LibAddressArrayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibAddressArray.Contract.LibAddressArrayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibAddressArray *LibAddressArrayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibAddressArray.Contract.LibAddressArrayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibAddressArray *LibAddressArrayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibAddressArray.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibAddressArray *LibAddressArrayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibAddressArray.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibAddressArray *LibAddressArrayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibAddressArray.Contract.contract.Transact(opts, method, params...)
}

// LibBytes32ArrayMetaData contains all meta data concerning the LibBytes32Array contract.
var LibBytes32ArrayMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x610545610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063300a068614610050578063e623fe531461008d578063ffdd3bcc146100cb575b600080fd5b81801561005c57600080fd5b50610077600480360381019061007291906102eb565b610108565b604051610084919061038d565b60405180910390f35b81801561009957600080fd5b506100b460048036038101906100af91906102eb565b61014b565b6040516100c2929190610364565b60405180910390f35b8180156100d757600080fd5b506100f260048036038101906100ed91906102eb565b6101e9565b6040516100ff9190610349565b60405180910390f35b6000828290806001815401808255809150506001900390600052602060002001600090919091909150556001838054905061014391906103a8565b905092915050565b60008060005b84805490508110156101a25783858281548110610171576101706104ad565b5b9060005260206000200154141561018f5760008092509250506101e2565b808061019a90610406565b915050610151565b508383908060018154018082558091505060019003906000526020600020016000909190919091505560018085805490506101dd91906103a8565b915091505b9250929050565b600080600090505b83805490508110156102b55782848281548110610211576102106104ad565b5b906000526020600020015414156102a257836001858054905061023491906103a8565b81548110610245576102446104ad565b5b9060005260206000200154848281548110610263576102626104ad565b5b9060005260206000200181905550838054806102825761028161047e565b5b6001900381819060005260206000200160009055905560019150506102bb565b80806102ad90610406565b9150506101f1565b50600090505b92915050565b6000813590506102d0816104e1565b92915050565b6000813590506102e5816104f8565b92915050565b60008060408385031215610302576103016104dc565b5b6000610310858286016102c1565b9250506020610321858286016102d6565b9150509250929050565b610334816103e6565b82525050565b610343816103fc565b82525050565b600060208201905061035e600083018461032b565b92915050565b6000604082019050610379600083018561032b565b610386602083018461033a565b9392505050565b60006020820190506103a2600083018461033a565b92915050565b60006103b3826103fc565b91506103be836103fc565b9250828210156103d1576103d061044f565b5b828203905092915050565b6000819050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000610411826103fc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156104445761044361044f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6104ea816103dc565b81146104f557600080fd5b50565b610501816103f2565b811461050c57600080fd5b5056fea26469706673582212202b4ac7446c61a0aa4791aad3d9fcf32be38ec537919d586221c8cf4f18594e5664736f6c63430008060033",
}

// LibBytes32ArrayABI is the input ABI used to generate the binding from.
// Deprecated: Use LibBytes32ArrayMetaData.ABI instead.
var LibBytes32ArrayABI = LibBytes32ArrayMetaData.ABI

// LibBytes32ArrayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibBytes32ArrayMetaData.Bin instead.
var LibBytes32ArrayBin = LibBytes32ArrayMetaData.Bin

// DeployLibBytes32Array deploys a new Ethereum contract, binding an instance of LibBytes32Array to it.
func DeployLibBytes32Array(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LibBytes32Array, error) {
	parsed, err := LibBytes32ArrayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibBytes32ArrayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LibBytes32Array{LibBytes32ArrayCaller: LibBytes32ArrayCaller{contract: contract}, LibBytes32ArrayTransactor: LibBytes32ArrayTransactor{contract: contract}, LibBytes32ArrayFilterer: LibBytes32ArrayFilterer{contract: contract}}, nil
}

// LibBytes32Array is an auto generated Go binding around an Ethereum contract.
type LibBytes32Array struct {
	LibBytes32ArrayCaller     // Read-only binding to the contract
	LibBytes32ArrayTransactor // Write-only binding to the contract
	LibBytes32ArrayFilterer   // Log filterer for contract events
}

// LibBytes32ArrayCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibBytes32ArrayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibBytes32ArrayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibBytes32ArrayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibBytes32ArrayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibBytes32ArrayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibBytes32ArraySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibBytes32ArraySession struct {
	Contract     *LibBytes32Array  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibBytes32ArrayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibBytes32ArrayCallerSession struct {
	Contract *LibBytes32ArrayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// LibBytes32ArrayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibBytes32ArrayTransactorSession struct {
	Contract     *LibBytes32ArrayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// LibBytes32ArrayRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibBytes32ArrayRaw struct {
	Contract *LibBytes32Array // Generic contract binding to access the raw methods on
}

// LibBytes32ArrayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibBytes32ArrayCallerRaw struct {
	Contract *LibBytes32ArrayCaller // Generic read-only contract binding to access the raw methods on
}

// LibBytes32ArrayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibBytes32ArrayTransactorRaw struct {
	Contract *LibBytes32ArrayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibBytes32Array creates a new instance of LibBytes32Array, bound to a specific deployed contract.
func NewLibBytes32Array(address common.Address, backend bind.ContractBackend) (*LibBytes32Array, error) {
	contract, err := bindLibBytes32Array(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LibBytes32Array{LibBytes32ArrayCaller: LibBytes32ArrayCaller{contract: contract}, LibBytes32ArrayTransactor: LibBytes32ArrayTransactor{contract: contract}, LibBytes32ArrayFilterer: LibBytes32ArrayFilterer{contract: contract}}, nil
}

// NewLibBytes32ArrayCaller creates a new read-only instance of LibBytes32Array, bound to a specific deployed contract.
func NewLibBytes32ArrayCaller(address common.Address, caller bind.ContractCaller) (*LibBytes32ArrayCaller, error) {
	contract, err := bindLibBytes32Array(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibBytes32ArrayCaller{contract: contract}, nil
}

// NewLibBytes32ArrayTransactor creates a new write-only instance of LibBytes32Array, bound to a specific deployed contract.
func NewLibBytes32ArrayTransactor(address common.Address, transactor bind.ContractTransactor) (*LibBytes32ArrayTransactor, error) {
	contract, err := bindLibBytes32Array(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibBytes32ArrayTransactor{contract: contract}, nil
}

// NewLibBytes32ArrayFilterer creates a new log filterer instance of LibBytes32Array, bound to a specific deployed contract.
func NewLibBytes32ArrayFilterer(address common.Address, filterer bind.ContractFilterer) (*LibBytes32ArrayFilterer, error) {
	contract, err := bindLibBytes32Array(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibBytes32ArrayFilterer{contract: contract}, nil
}

// bindLibBytes32Array binds a generic wrapper to an already deployed contract.
func bindLibBytes32Array(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibBytes32ArrayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibBytes32Array *LibBytes32ArrayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibBytes32Array.Contract.LibBytes32ArrayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibBytes32Array *LibBytes32ArrayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibBytes32Array.Contract.LibBytes32ArrayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibBytes32Array *LibBytes32ArrayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibBytes32Array.Contract.LibBytes32ArrayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibBytes32Array *LibBytes32ArrayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibBytes32Array.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibBytes32Array *LibBytes32ArrayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibBytes32Array.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibBytes32Array *LibBytes32ArrayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibBytes32Array.Contract.contract.Transact(opts, method, params...)
}

// LibDnsAccountantMetaData contains all meta data concerning the LibDnsAccountant contract.
var LibDnsAccountantMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvWithdraw\",\"type\":\"event\"}]",
	Bin: "0x61073d610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80636447ac9b14610050578063ce07098914610080578063e44603cc146100a9575b600080fd5b61006a60048036038101906100659190610408565b6100d2565b6040516100779190610569565b60405180910390f35b81801561008c57600080fd5b506100a760048036038101906100a2919061045b565b61015c565b005b8180156100b557600080fd5b506100d060048036038101906100cb919061045b565b6102f3565b005b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b808460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561021d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021490610549565b60405180910390fd5b808460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ab91906105eb565b925050819055507f512c3106e6590cd1ac3825291253b66d3ce5e63eac8056b07edd09da866034c18383836040516102e593929190610512565b60405180910390a150505050565b808460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103819190610595565b925050819055507f0800b512e293b03cc4aa49ea05981cc1a1b358323cbe4989b7133e94ee42212c8383836040516103bb93929190610512565b60405180910390a150505050565b6000813590506103d8816106c2565b92915050565b6000813590506103ed816106d9565b92915050565b600081359050610402816106f0565b92915050565b60008060006060848603121561042157610420610694565b5b600061042f868287016103de565b9350506020610440868287016103c9565b9250506040610451868287016103c9565b9150509250925092565b6000806000806080858703121561047557610474610694565b5b6000610483878288016103de565b9450506020610494878288016103c9565b93505060406104a5878288016103c9565b92505060606104b6878288016103f3565b91505092959194509250565b6104cb8161061f565b82525050565b60006104de601183610584565b91506104e982610699565b602082019050919050565b6104fd8161065b565b82525050565b61050c8161065b565b82525050565b600060608201905061052760008301866104c2565b61053460208301856104c2565b61054160408301846104f4565b949350505050565b60006020820190508181036000830152610562816104d1565b9050919050565b600060208201905061057e6000830184610503565b92915050565b600082825260208201905092915050565b60006105a08261065b565b91506105ab8361065b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105e0576105df610665565b5b828201905092915050565b60006105f68261065b565b91506106018361065b565b92508282101561061457610613610665565b5b828203905092915050565b600061062a8261063b565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f616d6f756e74206e6f7420656e6f756768000000000000000000000000000000600082015250565b6106cb8161061f565b81146106d657600080fd5b50565b6106e281610631565b81146106ed57600080fd5b50565b6106f98161065b565b811461070457600080fd5b5056fea2646970667358221220abe3755151db8c893b9a0895302fac17cada9e7386bce1e09aebe7545635517364736f6c63430008060033",
}

// LibDnsAccountantABI is the input ABI used to generate the binding from.
// Deprecated: Use LibDnsAccountantMetaData.ABI instead.
var LibDnsAccountantABI = LibDnsAccountantMetaData.ABI

// LibDnsAccountantBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibDnsAccountantMetaData.Bin instead.
var LibDnsAccountantBin = LibDnsAccountantMetaData.Bin

// DeployLibDnsAccountant deploys a new Ethereum contract, binding an instance of LibDnsAccountant to it.
func DeployLibDnsAccountant(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LibDnsAccountant, error) {
	parsed, err := LibDnsAccountantMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibDnsAccountantBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LibDnsAccountant{LibDnsAccountantCaller: LibDnsAccountantCaller{contract: contract}, LibDnsAccountantTransactor: LibDnsAccountantTransactor{contract: contract}, LibDnsAccountantFilterer: LibDnsAccountantFilterer{contract: contract}}, nil
}

// LibDnsAccountant is an auto generated Go binding around an Ethereum contract.
type LibDnsAccountant struct {
	LibDnsAccountantCaller     // Read-only binding to the contract
	LibDnsAccountantTransactor // Write-only binding to the contract
	LibDnsAccountantFilterer   // Log filterer for contract events
}

// LibDnsAccountantCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibDnsAccountantCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibDnsAccountantTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibDnsAccountantTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibDnsAccountantFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibDnsAccountantFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibDnsAccountantSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibDnsAccountantSession struct {
	Contract     *LibDnsAccountant // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibDnsAccountantCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibDnsAccountantCallerSession struct {
	Contract *LibDnsAccountantCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// LibDnsAccountantTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibDnsAccountantTransactorSession struct {
	Contract     *LibDnsAccountantTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// LibDnsAccountantRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibDnsAccountantRaw struct {
	Contract *LibDnsAccountant // Generic contract binding to access the raw methods on
}

// LibDnsAccountantCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibDnsAccountantCallerRaw struct {
	Contract *LibDnsAccountantCaller // Generic read-only contract binding to access the raw methods on
}

// LibDnsAccountantTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibDnsAccountantTransactorRaw struct {
	Contract *LibDnsAccountantTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibDnsAccountant creates a new instance of LibDnsAccountant, bound to a specific deployed contract.
func NewLibDnsAccountant(address common.Address, backend bind.ContractBackend) (*LibDnsAccountant, error) {
	contract, err := bindLibDnsAccountant(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountant{LibDnsAccountantCaller: LibDnsAccountantCaller{contract: contract}, LibDnsAccountantTransactor: LibDnsAccountantTransactor{contract: contract}, LibDnsAccountantFilterer: LibDnsAccountantFilterer{contract: contract}}, nil
}

// NewLibDnsAccountantCaller creates a new read-only instance of LibDnsAccountant, bound to a specific deployed contract.
func NewLibDnsAccountantCaller(address common.Address, caller bind.ContractCaller) (*LibDnsAccountantCaller, error) {
	contract, err := bindLibDnsAccountant(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountantCaller{contract: contract}, nil
}

// NewLibDnsAccountantTransactor creates a new write-only instance of LibDnsAccountant, bound to a specific deployed contract.
func NewLibDnsAccountantTransactor(address common.Address, transactor bind.ContractTransactor) (*LibDnsAccountantTransactor, error) {
	contract, err := bindLibDnsAccountant(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountantTransactor{contract: contract}, nil
}

// NewLibDnsAccountantFilterer creates a new log filterer instance of LibDnsAccountant, bound to a specific deployed contract.
func NewLibDnsAccountantFilterer(address common.Address, filterer bind.ContractFilterer) (*LibDnsAccountantFilterer, error) {
	contract, err := bindLibDnsAccountant(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountantFilterer{contract: contract}, nil
}

// bindLibDnsAccountant binds a generic wrapper to an already deployed contract.
func bindLibDnsAccountant(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibDnsAccountantABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibDnsAccountant *LibDnsAccountantRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibDnsAccountant.Contract.LibDnsAccountantCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibDnsAccountant *LibDnsAccountantRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibDnsAccountant.Contract.LibDnsAccountantTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibDnsAccountant *LibDnsAccountantRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibDnsAccountant.Contract.LibDnsAccountantTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibDnsAccountant *LibDnsAccountantCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibDnsAccountant.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibDnsAccountant *LibDnsAccountantTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibDnsAccountant.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibDnsAccountant *LibDnsAccountantTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibDnsAccountant.Contract.contract.Transact(opts, method, params...)
}

// LibDnsAccountantEvDepositIterator is returned from FilterEvDeposit and is used to iterate over the raw logs and unpacked data for EvDeposit events raised by the LibDnsAccountant contract.
type LibDnsAccountantEvDepositIterator struct {
	Event *LibDnsAccountantEvDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibDnsAccountantEvDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibDnsAccountantEvDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibDnsAccountantEvDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibDnsAccountantEvDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibDnsAccountantEvDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibDnsAccountantEvDeposit represents a EvDeposit event raised by the LibDnsAccountant contract.
type LibDnsAccountantEvDeposit struct {
	Account   common.Address
	Erc20Addr common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEvDeposit is a free log retrieval operation binding the contract event 0x0800b512e293b03cc4aa49ea05981cc1a1b358323cbe4989b7133e94ee42212c.
//
// Solidity: event EvDeposit(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) FilterEvDeposit(opts *bind.FilterOpts) (*LibDnsAccountantEvDepositIterator, error) {

	logs, sub, err := _LibDnsAccountant.contract.FilterLogs(opts, "EvDeposit")
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountantEvDepositIterator{contract: _LibDnsAccountant.contract, event: "EvDeposit", logs: logs, sub: sub}, nil
}

// WatchEvDeposit is a free log subscription operation binding the contract event 0x0800b512e293b03cc4aa49ea05981cc1a1b358323cbe4989b7133e94ee42212c.
//
// Solidity: event EvDeposit(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) WatchEvDeposit(opts *bind.WatchOpts, sink chan<- *LibDnsAccountantEvDeposit) (event.Subscription, error) {

	logs, sub, err := _LibDnsAccountant.contract.WatchLogs(opts, "EvDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibDnsAccountantEvDeposit)
				if err := _LibDnsAccountant.contract.UnpackLog(event, "EvDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvDeposit is a log parse operation binding the contract event 0x0800b512e293b03cc4aa49ea05981cc1a1b358323cbe4989b7133e94ee42212c.
//
// Solidity: event EvDeposit(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) ParseEvDeposit(log types.Log) (*LibDnsAccountantEvDeposit, error) {
	event := new(LibDnsAccountantEvDeposit)
	if err := _LibDnsAccountant.contract.UnpackLog(event, "EvDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LibDnsAccountantEvWithdrawIterator is returned from FilterEvWithdraw and is used to iterate over the raw logs and unpacked data for EvWithdraw events raised by the LibDnsAccountant contract.
type LibDnsAccountantEvWithdrawIterator struct {
	Event *LibDnsAccountantEvWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LibDnsAccountantEvWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LibDnsAccountantEvWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LibDnsAccountantEvWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LibDnsAccountantEvWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LibDnsAccountantEvWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LibDnsAccountantEvWithdraw represents a EvWithdraw event raised by the LibDnsAccountant contract.
type LibDnsAccountantEvWithdraw struct {
	Account   common.Address
	Erc20Addr common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEvWithdraw is a free log retrieval operation binding the contract event 0x512c3106e6590cd1ac3825291253b66d3ce5e63eac8056b07edd09da866034c1.
//
// Solidity: event EvWithdraw(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) FilterEvWithdraw(opts *bind.FilterOpts) (*LibDnsAccountantEvWithdrawIterator, error) {

	logs, sub, err := _LibDnsAccountant.contract.FilterLogs(opts, "EvWithdraw")
	if err != nil {
		return nil, err
	}
	return &LibDnsAccountantEvWithdrawIterator{contract: _LibDnsAccountant.contract, event: "EvWithdraw", logs: logs, sub: sub}, nil
}

// WatchEvWithdraw is a free log subscription operation binding the contract event 0x512c3106e6590cd1ac3825291253b66d3ce5e63eac8056b07edd09da866034c1.
//
// Solidity: event EvWithdraw(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) WatchEvWithdraw(opts *bind.WatchOpts, sink chan<- *LibDnsAccountantEvWithdraw) (event.Subscription, error) {

	logs, sub, err := _LibDnsAccountant.contract.WatchLogs(opts, "EvWithdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LibDnsAccountantEvWithdraw)
				if err := _LibDnsAccountant.contract.UnpackLog(event, "EvWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvWithdraw is a log parse operation binding the contract event 0x512c3106e6590cd1ac3825291253b66d3ce5e63eac8056b07edd09da866034c1.
//
// Solidity: event EvWithdraw(address account, address erc20Addr, uint256 amount)
func (_LibDnsAccountant *LibDnsAccountantFilterer) ParseEvWithdraw(log types.Log) (*LibDnsAccountantEvWithdraw, error) {
	event := new(LibDnsAccountantEvWithdraw)
	if err := _LibDnsAccountant.contract.UnpackLog(event, "EvWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LibMultiSigMetaData contains all meta data concerning the LibMultiSig contract.
var LibMultiSigMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x611986610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c8063ac72d6a41161007b578063ac72d6a41461019a578063bd80c306146101c3578063c8bb9d82146101ec578063d162dcb214610215578063d7c391a914610245578063e71665421461026e576100b3565b806304c88710146100b85780630e13674e146100e15780635d5a7024146101115780636b0050c4146101415780639ffff39614610171575b600080fd5b8180156100c457600080fd5b506100df60048036038101906100da9190611105565b610297565b005b6100fb60048036038101906100f6919061123f565b610423565b60405161010891906114b9565b60405180910390f35b61012b600480360381019061012691906111ff565b61056e565b60405161013891906114b9565b60405180910390f35b61015b600480360381019061015691906110d8565b6105a4565b6040516101689190611614565b60405180910390f35b81801561017d57600080fd5b50610198600480360381019061019391906110d8565b6105b2565b005b8180156101a657600080fd5b506101c160048036038101906101bc9190611198565b6105d2565b005b8180156101cf57600080fd5b506101ea60048036038101906101e5919061123f565b610962565b005b8180156101f857600080fd5b50610213600480360381019061020e9190611145565b610b4e565b005b61022f600480360381019061022a91906110d8565b610e1e565b60405161023c91906114b9565b60405180910390f35b81801561025157600080fd5b5061026c60048036038101906102679190611105565b610e39565b005b81801561027a57600080fd5b50610295600480360381019061029091906110d8565b610fcf565b005b8160020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c90611574565b60405180910390fd5b81600101600081548092919061033a9061169c565b91905055508160020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558160030173__$ae7d58307b48f566e6dd130bee0f44ebb6$__63ec3770099091836040518363ffffffff1660e01b81526004016103ce929190611467565b60206040518083038186803b1580156103e657600080fd5b505af41580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e91906110ab565b505050565b600080846004016000858152602001908152602001600020600001541161047f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610476906114d4565b60405180910390fd5b83600401600084815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610521576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051890611534565b60405180910390fd5b836004016000848152602001908152602001600020600001548460040160008581526020019081526020016000206001015414156105625760019050610567565b600090505b9392505050565b600080836004016000848152602001908152602001600020600001541115610599576001905061059e565b600090505b92915050565b600081600101549050919050565b60008160000160006101000a81548160ff02191690831515021790555050565b8084600101541015610619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610610906115b4565b60405180910390fd5b8360020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e90611554565b60405180910390fd5b60008460040160008481526020019081526020016000206000015414610702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f990611514565b60405180910390fd5b8360000160019054906101000a900460ff1615610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b90611594565b60405180910390fd5b8084600401600084815260200190815260200160002060000181905550836004016000838152602001908152602001600020600101600081548092919061079a906116c6565b9190505550600184600401600084815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083600401600083815260200190815260200160002060030173__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091856040518363ffffffff1660e01b815260040161085f929190611467565b60206040518083038186803b15801561087757600080fd5b505af415801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611292565b5060018460000160016101000a81548160ff0219169083151502179055508360050173__$85322f0591bc1264ab1fdf757d429c9497$__63300a06869091846040518363ffffffff1660e01b815260040161090b929190611490565b60206040518083038186803b15801561092357600080fd5b505af4158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190611292565b5050505050565b60008360040160008481526020019081526020016000206000015411801561099857508260000160019054906101000a900460ff165b6109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce906114d4565b60405180910390fd5b8260020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906115d4565b60405180910390fd5b60008360000160016101000a81548160ff0219169083151502179055508260040160008381526020019081526020016000206000808201600090556001820160009055600382016000610ab89190610fef565b50508260050173__$85322f0591bc1264ab1fdf757d429c9497$__63ffdd3bcc9091846040518363ffffffff1660e01b8152600401610af8929190611490565b60206040518083038186803b158015610b1057600080fd5b505af4158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4891906110ab565b50505050565b60008360040160008381526020019081526020016000206000015411610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba0906114d4565b60405180910390fd5b8260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e90611554565b60405180910390fd5b82600401600082815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd1906115f4565b60405180910390fd5b8260040160008281526020019081526020016000206001016000815480929190610d03906116c6565b9190505550600183600401600083815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600401600082815260200190815260200160002060030173__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091846040518363ffffffff1660e01b8152600401610dc8929190611467565b60206040518083038186803b158015610de057600080fd5b505af4158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611292565b50505050565b60008160000160009054906101000a900460ff169050919050565b8160020160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf906114f4565b60405180910390fd5b816001016000815480929190610edd906116c6565b919050555060018260020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508160030173__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091836040518363ffffffff1660e01b8152600401610f7a929190611467565b60206040518083038186803b158015610f9257600080fd5b505af4158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611292565b505050565b60018160000160006101000a81548160ff02191690831515021790555050565b508054600082559060005260206000209081019061100d9190611010565b50565b5b80821115611029576000816000905550600101611011565b5090565b60008135905061103c816118dd565b92915050565b600081519050611051816118f4565b92915050565b6000813590506110668161190b565b92915050565b60008135905061107b81611922565b92915050565b60008135905061109081611939565b92915050565b6000815190506110a581611939565b92915050565b6000602082840312156110c1576110c061173e565b5b60006110cf84828501611042565b91505092915050565b6000602082840312156110ee576110ed61173e565b5b60006110fc8482850161106c565b91505092915050565b6000806040838503121561111c5761111b61173e565b5b600061112a8582860161106c565b925050602061113b8582860161102d565b9150509250929050565b60008060006060848603121561115e5761115d61173e565b5b600061116c8682870161106c565b935050602061117d8682870161102d565b925050604061118e86828701611057565b9150509250925092565b600080600080608085870312156111b2576111b161173e565b5b60006111c08782880161106c565b94505060206111d18782880161102d565b93505060406111e287828801611057565b92505060606111f387828801611081565b91505092959194509250565b600080604083850312156112165761121561173e565b5b60006112248582860161106c565b925050602061123585828601611057565b9150509250929050565b6000806000606084860312156112585761125761173e565b5b60006112668682870161106c565b935050602061127786828701611057565b92505060406112888682870161102d565b9150509250925092565b6000602082840312156112a8576112a761173e565b5b60006112b684828501611096565b91505092915050565b6112c881611640565b82525050565b8082525050565b8082525050565b6112e581611652565b82525050565b6112f48161165e565b82525050565b600061130760168361162f565b915061131282611743565b602082019050919050565b600061132a600e8361162f565b91506113358261176c565b602082019050919050565b600061134d600f8361162f565b915061135882611795565b602082019050919050565b6000611370600f8361162f565b915061137b826117be565b602082019050919050565b600061139360108361162f565b915061139e826117e7565b602082019050919050565b60006113b660128361162f565b91506113c182611810565b602082019050919050565b60006113d9600d8361162f565b91506113e482611839565b602082019050919050565b60006113fc60158361162f565b915061140782611862565b602082019050919050565b600061141f60208361162f565b915061142a8261188b565b602082019050919050565b6000611442600e8361162f565b915061144d826118b4565b602082019050919050565b61146181611692565b82525050565b600060408201905061147c60008301856112ce565b61148960208301846112bf565b9392505050565b60006040820190506114a560008301856112d5565b6114b260208301846112eb565b9392505050565b60006020820190506114ce60008301846112dc565b92915050565b600060208201905081810360008301526114ed816112fa565b9050919050565b6000602082019050818103600083015261150d8161131d565b9050919050565b6000602082019050818103600083015261152d81611340565b9050919050565b6000602082019050818103600083015261154d81611363565b9050919050565b6000602082019050818103600083015261156d81611386565b9050919050565b6000602082019050818103600083015261158d816113a9565b9050919050565b600060208201905081810360008301526115ad816113cc565b9050919050565b600060208201905081810360008301526115cd816113ef565b9050919050565b600060208201905081810360008301526115ed81611412565b9050919050565b6000602082019050818103600083015261160d81611435565b9050919050565b60006020820190506116296000830184611458565b92915050565b600082825260208201905092915050565b600061164b82611672565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116a782611692565b915060008214156116bb576116ba61170f565b5b600182039050919050565b60006116d182611692565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117045761170361170f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f7361666520736967206973206e6f742065786973747300000000000000000000600082015250565b7f7573657220697320696e20736574000000000000000000000000000000000000600082015250565b7f7461736b20697320657869737465640000000000000000000000000000000000600082015250565b7f6e6f7420612063616e6469646174650000000000000000000000000000000000600082015250565b7f7369676e6572206e6f742076616c696400000000000000000000000000000000600082015250565b7f75736572206973206e6f7420696e207365740000000000000000000000000000600082015250565b7f6f6e6c79206f6e65207461736b00000000000000000000000000000000000000600082015250565b7f73696720636f756e74206e6f7420636f72726563740000000000000000000000600082015250565b7f6e6f7420612063616e6469646174652c2063616e27742064656c657465206974600082015250565b7f7369672069732065786973746564000000000000000000000000000000000000600082015250565b6118e681611640565b81146118f157600080fd5b50565b6118fd81611652565b811461190857600080fd5b50565b6119148161165e565b811461191f57600080fd5b50565b61192b81611668565b811461193657600080fd5b50565b61194281611692565b811461194d57600080fd5b5056fea2646970667358221220edf12e21a6fba00a1d66fd42f6fa4fedf392b46c3cef57e742e584559885dfcf64736f6c63430008060033",
}

// LibMultiSigABI is the input ABI used to generate the binding from.
// Deprecated: Use LibMultiSigMetaData.ABI instead.
var LibMultiSigABI = LibMultiSigMetaData.ABI

// LibMultiSigBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LibMultiSigMetaData.Bin instead.
var LibMultiSigBin = LibMultiSigMetaData.Bin

// DeployLibMultiSig deploys a new Ethereum contract, binding an instance of LibMultiSig to it.
func DeployLibMultiSig(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LibMultiSig, error) {
	parsed, err := LibMultiSigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	libBytes32ArrayAddr, _, _, _ := DeployLibBytes32Array(auth, backend)
	LibMultiSigBin = strings.ReplaceAll(LibMultiSigBin, "__$85322f0591bc1264ab1fdf757d429c9497$__", libBytes32ArrayAddr.String()[2:])

	libAddressArrayAddr, _, _, _ := DeployLibAddressArray(auth, backend)
	LibMultiSigBin = strings.ReplaceAll(LibMultiSigBin, "__$ae7d58307b48f566e6dd130bee0f44ebb6$__", libAddressArrayAddr.String()[2:])

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LibMultiSigBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LibMultiSig{LibMultiSigCaller: LibMultiSigCaller{contract: contract}, LibMultiSigTransactor: LibMultiSigTransactor{contract: contract}, LibMultiSigFilterer: LibMultiSigFilterer{contract: contract}}, nil
}

// LibMultiSig is an auto generated Go binding around an Ethereum contract.
type LibMultiSig struct {
	LibMultiSigCaller     // Read-only binding to the contract
	LibMultiSigTransactor // Write-only binding to the contract
	LibMultiSigFilterer   // Log filterer for contract events
}

// LibMultiSigCaller is an auto generated read-only Go binding around an Ethereum contract.
type LibMultiSigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibMultiSigTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LibMultiSigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibMultiSigFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LibMultiSigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LibMultiSigSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LibMultiSigSession struct {
	Contract     *LibMultiSig      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LibMultiSigCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LibMultiSigCallerSession struct {
	Contract *LibMultiSigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// LibMultiSigTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LibMultiSigTransactorSession struct {
	Contract     *LibMultiSigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// LibMultiSigRaw is an auto generated low-level Go binding around an Ethereum contract.
type LibMultiSigRaw struct {
	Contract *LibMultiSig // Generic contract binding to access the raw methods on
}

// LibMultiSigCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LibMultiSigCallerRaw struct {
	Contract *LibMultiSigCaller // Generic read-only contract binding to access the raw methods on
}

// LibMultiSigTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LibMultiSigTransactorRaw struct {
	Contract *LibMultiSigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLibMultiSig creates a new instance of LibMultiSig, bound to a specific deployed contract.
func NewLibMultiSig(address common.Address, backend bind.ContractBackend) (*LibMultiSig, error) {
	contract, err := bindLibMultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LibMultiSig{LibMultiSigCaller: LibMultiSigCaller{contract: contract}, LibMultiSigTransactor: LibMultiSigTransactor{contract: contract}, LibMultiSigFilterer: LibMultiSigFilterer{contract: contract}}, nil
}

// NewLibMultiSigCaller creates a new read-only instance of LibMultiSig, bound to a specific deployed contract.
func NewLibMultiSigCaller(address common.Address, caller bind.ContractCaller) (*LibMultiSigCaller, error) {
	contract, err := bindLibMultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LibMultiSigCaller{contract: contract}, nil
}

// NewLibMultiSigTransactor creates a new write-only instance of LibMultiSig, bound to a specific deployed contract.
func NewLibMultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*LibMultiSigTransactor, error) {
	contract, err := bindLibMultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LibMultiSigTransactor{contract: contract}, nil
}

// NewLibMultiSigFilterer creates a new log filterer instance of LibMultiSig, bound to a specific deployed contract.
func NewLibMultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*LibMultiSigFilterer, error) {
	contract, err := bindLibMultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LibMultiSigFilterer{contract: contract}, nil
}

// bindLibMultiSig binds a generic wrapper to an already deployed contract.
func bindLibMultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LibMultiSigABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibMultiSig *LibMultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibMultiSig.Contract.LibMultiSigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibMultiSig *LibMultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibMultiSig.Contract.LibMultiSigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibMultiSig *LibMultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibMultiSig.Contract.LibMultiSigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LibMultiSig *LibMultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LibMultiSig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LibMultiSig *LibMultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LibMultiSig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LibMultiSig *LibMultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LibMultiSig.Contract.contract.Transact(opts, method, params...)
}

// MultiSigMetaData contains all meta data concerning the MultiSig contract.
var MultiSigMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"closeMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"delSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"getAllTask\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx_\",\"type\":\"uint256\"}],\"name\":\"getContractList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[8]\",\"name\":\"\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"candidate_\",\"type\":\"address\"}],\"name\":\"getSafeSig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"getSignerSetAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cnt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"getTaskSignerSetAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiSignerStore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"work\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"SignerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"}],\"name\":\"openMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"removeSafeSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506003600281905550613bc8806100286000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806356a77bfe1161008c57806374fa74f81161006657806374fa74f814610285578063ba272e03146102b5578063e8fe7bff146102d1578063ea6e0c0c146102ef576100ea565b806356a77bfe146102095780636594558714610225578063741489b714610255576100ea565b8063328d4d8c116100c8578063328d4d8c146101595780633410c6f91461018b5780633db98b04146101bd5780634f93e17f146101ed576100ea565b806313f1ff1b146100ef5780632239f5561461010b5780632696145b14610127575b600080fd5b61010960048036038101906101049190612fa1565b61031f565b005b61012560048036038101906101209190612f61565b6103cd565b005b610141600480360381019061013c9190612f07565b610da4565b60405161015093929190613470565b60405180910390f35b610173600480360381019061016e9190612fa1565b610de8565b6040516101829392919061371c565b60405180910390f35b6101a560048036038101906101a09190613034565b610eb0565b6040516101b4939291906136e4565b60405180910390f35b6101d760048036038101906101d29190612f07565b611105565b6040516101e491906134a7565b60405180910390f35b61020760048036038101906102029190612f61565b6111f5565b005b610223600480360381019061021e9190612f07565b611bcc565b005b61023f600480360381019061023a9190612f07565b6125a0565b60405161024c91906134a7565b60405180910390f35b61026f600480360381019061026a9190613034565b6126b0565b60405161027c9190613411565b60405180910390f35b61029f600480360381019061029a9190612fe1565b6126fe565b6040516102ac9190613455565b60405180910390f35b6102cf60048036038101906102ca9190612f07565b6128d8565b005b6102d9612d13565b6040516102e691906136c9565b60405180910390f35b61030960048036038101906103049190612fa1565b612d19565b60405161031691906134a7565b60405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b815260040161039993929190613692565b60006040518083038186803b1580156103b157600080fd5b505af41580156103c5573d6000803e3d6000fd5b505050505050565b818282632239f55660e01b6040516020016103ea93929190613358565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610470576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610467906134c9565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515141561072d578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561051157600080fd5b505afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105499190612f34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ad90613589565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d7c391a99091856040518363ffffffff1660e01b815260040161062e9291906135c4565b60006040518083038186803b15801561064657600080fd5b505af415801561065a573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091866040518363ffffffff1660e01b81526004016106d792919061342c565b60206040518083038186803b1580156106ef57600080fd5b505af4158015610703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072791906130a1565b50610d9e565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ef90613509565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b8152600401610870929190613669565b60206040518083038186803b15801561088857600080fd5b505af415801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190613074565b610a06576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615610953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094a906134e9565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b81526004016109d19493929190613624565b60006040518083038186803b1580156109e957600080fd5b505af41580156109fd573d6000803e3d6000fd5b50505050610d9d565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b8152600401610a80939291906135ed565b60006040518083038186803b158015610a9857600080fd5b505af4158015610aac573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b8152600401610b2a93929190613692565b60206040518083038186803b158015610b4257600080fd5b505af4158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190613074565b15610d9c576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d7c391a99091856040518363ffffffff1660e01b8152600401610bf79291906135c4565b60006040518083038186803b158015610c0f57600080fd5b505af4158015610c23573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__6395953da59091866040518363ffffffff1660e01b8152600401610ca092919061342c565b60206040518083038186803b158015610cb857600080fd5b505af4158015610ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf091906130a1565b506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b8152600401610d6b93929190613692565b60006040518083038186803b158015610d8357600080fd5b505af4158015610d97573d6000803e3d6000fd5b505050505b5b5b50505050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060010154905083565b60008060606000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000858152602001908152602001600020600001546000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060010154610ea38787612d2d565b9250925092509250925092565b600080610ebb612e66565b610ec3612e66565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508610610f6157600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905060008394509450945050506110fe565b60008690505b600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081108015610fc35750600887610fc091906137bf565b81105b156110af57600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061101957611018613988565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683826008811061105757611056613988565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508180611099906138d8565b92505080806110a7906138d8565b915050610f67565b50600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050818394509450945050505b9250925092565b60608060005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501805490508110156111eb57816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050182815481106111ab576111aa613988565b5b90600052602060002001546040516020016111c79291906133e9565b604051602081830303815290604052915080806111e3906138d8565b91505061110b565b5080915050919050565b818282634f93e17f60e01b60405160200161121293929190613358565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128f906134c9565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415611555578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190612f34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590613589565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__6304c887109091856040518363ffffffff1660e01b81526004016114569291906135c4565b60006040518083038186803b15801561146e57600080fd5b505af4158015611482573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__63ec3770099091866040518363ffffffff1660e01b81526004016114ff92919061342c565b60206040518083038186803b15801561151757600080fd5b505af415801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f9190613074565b50611bc6565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161790613509565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b8152600401611698929190613669565b60206040518083038186803b1580156116b057600080fd5b505af41580156116c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e89190613074565b61182e576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161561177b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611772906134e9565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b81526004016117f99493929190613624565b60006040518083038186803b15801561181157600080fd5b505af4158015611825573d6000803e3d6000fd5b50505050611bc5565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b81526004016118a8939291906135ed565b60006040518083038186803b1580156118c057600080fd5b505af41580156118d4573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b815260040161195293929190613692565b60206040518083038186803b15801561196a57600080fd5b505af415801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a29190613074565b15611bc4576000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__6304c887109091856040518363ffffffff1660e01b8152600401611a1f9291906135c4565b60006040518083038186803b158015611a3757600080fd5b505af4158015611a4b573d6000803e3d6000fd5b50505050600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$ae7d58307b48f566e6dd130bee0f44ebb6$__63ec3770099091866040518363ffffffff1660e01b8152600401611ac892919061342c565b60206040518083038186803b158015611ae057600080fd5b505af4158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b189190613074565b506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b8152600401611b9393929190613692565b60006040518083038186803b158015611bab57600080fd5b505af4158015611bbf573d6000803e3d6000fd5b505050505b5b5b50505050565b80816356a77bfe60e01b604051602001611be7929190613395565b60405160208183030381529060405280519060200120600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c64906134c9565b60405180910390fd5b600015156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151415611f2a578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d0e57600080fd5b505afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d469190612f34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa90613589565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b8152600401611e2991906135a9565b60206040518083038186803b158015611e4157600080fd5b505af4158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e799190613074565b15611f25576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__639ffff39690916040518263ffffffff1660e01b8152600401611ef491906135a9565b60006040518083038186803b158015611f0c57600080fd5b505af4158015611f20573d6000803e3d6000fd5b505050505b61259b565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fec90613509565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__635d5a70249091836040518363ffffffff1660e01b815260040161206d929190613669565b60206040518083038186803b15801561208557600080fd5b505af4158015612099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120bd9190613074565b612203576000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615612150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612147906134e9565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63ac72d6a4909133846002546040518563ffffffff1660e01b81526004016121ce9493929190613624565b60006040518083038186803b1580156121e657600080fd5b505af41580156121fa573d6000803e3d6000fd5b5050505061259a565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63c8bb9d82909133846040518463ffffffff1660e01b815260040161227d939291906135ed565b60006040518083038186803b15801561229557600080fd5b505af41580156122a9573d6000803e3d6000fd5b505050506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909183336040518463ffffffff1660e01b815260040161232793929190613692565b60206040518083038186803b15801561233f57600080fd5b505af4158015612353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123779190613074565b15612599576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b81526004016123f291906135a9565b60206040518083038186803b15801561240a57600080fd5b505af415801561241e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124429190613074565b156124ee576000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__639ffff39690916040518263ffffffff1660e01b81526004016124bd91906135a9565b60006040518083038186803b1580156124d557600080fd5b505af41580156124e9573d6000803e3d6000fd5b505050505b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63bd80c306909183336040518463ffffffff1660e01b815260040161256893929190613692565b60006040518083038186803b15801561258057600080fd5b505af4158015612594573d6000803e3d6000fd5b505050505b5b5b505050565b60608060005b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301805490508110156126a657816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301828154811061264657612645613988565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016126829291906133c1565b6040516020818303038152906040529150808061269e906138d8565b9150506125a6565b5080915050919050565b600160205281600052604060002081815481106126cc57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b815260040161277691906135a9565b60206040518083038186803b15801561278e57600080fd5b505af41580156127a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c69190613074565b612805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fc90613529565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__630e13674e909185856040518463ffffffff1660e01b815260040161287f93929190613692565b60206040518083038186803b15801561289757600080fd5b505af41580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613074565b90509392505050565b80600015156000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151461296e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296590613569565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b457600080fd5b505afa1580156129c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ec9190612f34565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5090613589565b60405180910390fd5b6002546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__636b0050c490916040518263ffffffff1660e01b8152600401612ad291906135a9565b60206040518083038186803b158015612aea57600080fd5b505af4158015612afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2291906130a1565b1015612b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5a90613549565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63d162dcb290916040518263ffffffff1660e01b8152600401612bd991906135a9565b60206040518083038186803b158015612bf157600080fd5b505af4158015612c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c299190613074565b15612c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6090613529565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$75b7a25587b53564bca376d1b99e97afd3$__63e716654290916040518263ffffffff1660e01b8152600401612cdf91906135a9565b60006040518083038186803b158015612cf757600080fd5b505af4158015612d0b573d6000803e3d6000fd5b505050505050565b60025481565b6060612d258383612d2d565b905092915050565b60608060005b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600085815260200190815260200160002060030180549050811015612e5b57816000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008681526020019081526020016000206003018281548110612dfb57612dfa613988565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001612e379291906133c1565b60405160208183030381529060405291508080612e53906138d8565b915050612d33565b508091505092915050565b604051806101000160405280600890602082028036833780820191505090505090565b600081359050612e9881613b1f565b92915050565b600081519050612ead81613b36565b92915050565b600081519050612ec281613b4d565b92915050565b600081359050612ed781613b64565b92915050565b600081359050612eec81613b7b565b92915050565b600081519050612f0181613b7b565b92915050565b600060208284031215612f1d57612f1c6139b7565b5b6000612f2b84828501612e89565b91505092915050565b600060208284031215612f4a57612f496139b7565b5b6000612f5884828501612e9e565b91505092915050565b60008060408385031215612f7857612f776139b7565b5b6000612f8685828601612e89565b9250506020612f9785828601612e89565b9150509250929050565b60008060408385031215612fb857612fb76139b7565b5b6000612fc685828601612e89565b9250506020612fd785828601612ec8565b9150509250929050565b600080600060608486031215612ffa57612ff96139b7565b5b600061300886828701612e89565b935050602061301986828701612ec8565b925050604061302a86828701612e89565b9150509250925092565b6000806040838503121561304b5761304a6139b7565b5b600061305985828601612e89565b925050602061306a85828601612edd565b9150509250929050565b60006020828403121561308a576130896139b7565b5b600061309884828501612eb3565b91505092915050565b6000602082840312156130b7576130b66139b7565b5b60006130c584828501612ef2565b91505092915050565b60006130da83836130e6565b60208301905092915050565b6130ef81613815565b82525050565b6130fe81613815565b82525050565b61310d81613815565b82525050565b61312461311f82613815565b613921565b82525050565b61313381613764565b61313d8184613787565b92506131488261375a565b8060005b8381101561317957815161316087826130ce565b965061316b8361377a565b92505060018101905061314c565b505050505050565b8082525050565b61319181613839565b82525050565b6131a081613845565b82525050565b6131b76131b282613845565b613933565b82525050565b6131ce6131c98261384f565b61393d565b82525050565b60006131df8261376f565b6131e98185613792565b93506131f98185602086016138a5565b613202816139bc565b840191505092915050565b60006132188261376f565b61322281856137a3565b93506132328185602086016138a5565b80840191505092915050565b600061324b601a836137ae565b9150613256826139da565b602082019050919050565b600061326e600d836137ae565b915061327982613a03565b602082019050919050565b60006132916010836137ae565b915061329c82613a2c565b602082019050919050565b60006132b46013836137ae565b91506132bf82613a55565b602082019050919050565b60006132d76023836137ae565b91506132e282613a7e565b604082019050919050565b60006132fa6019836137ae565b915061330582613acd565b602082019050919050565b600061331d6009836137ae565b915061332882613af6565b602082019050919050565b8082525050565b6133438161389b565b82525050565b6133528161389b565b82525050565b60006133648286613113565b6014820191506133748285613113565b60148201915061338482846131bd565b600482019150819050949350505050565b60006133a18285613113565b6014820191506133b182846131bd565b6004820191508190509392505050565b60006133cd828561320d565b91506133d98284613113565b6014820191508190509392505050565b60006133f5828561320d565b915061340182846131a6565b6020820191508190509392505050565b600060208201905061342660008301846130f5565b92915050565b60006040820190506134416000830185613181565b61344e6020830184613104565b9392505050565b600060208201905061346a6000830184613188565b92915050565b60006060820190506134856000830186613188565b6134926020830185613188565b61349f604083018461333a565b949350505050565b600060208201905081810360008301526134c181846131d4565b905092915050565b600060208201905081810360008301526134e28161323e565b9050919050565b6000602082019050818103600083015261350281613261565b9050919050565b6000602082019050818103600083015261352281613284565b9050919050565b60006020820190508181036000830152613542816132a7565b9050919050565b60006020820190508181036000830152613562816132ca565b9050919050565b60006020820190508181036000830152613582816132ed565b9050919050565b600060208201905081810360008301526135a281613310565b9050919050565b60006020820190506135be6000830184613333565b92915050565b60006040820190506135d96000830185613333565b6135e66020830184613104565b9392505050565b60006060820190506136026000830186613333565b61360f6020830185613104565b61361c6040830184613197565b949350505050565b60006080820190506136396000830187613333565b6136466020830186613104565b6136536040830185613197565b6136606060830184613349565b95945050505050565b600060408201905061367e6000830185613333565b61368b6020830184613197565b9392505050565b60006060820190506136a76000830186613333565b6136b46020830185613197565b6136c16040830184613104565b949350505050565b60006020820190506136de600083018461333a565b92915050565b6000610140820190506136fa600083018661333a565b613707602083018561333a565b613714604083018461312a565b949350505050565b6000606082019050613731600083018661333a565b61373e602083018561333a565b818103604083015261375081846131d4565b9050949350505050565b6000819050919050565b600060089050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006137ca8261389b565b91506137d58361389b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561380a57613809613959565b5b828201905092915050565b60006138208261387b565b9050919050565b60006138328261387b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156138c35780820151818401526020810190506138a8565b838111156138d2576000848401525b50505050565b60006138e38261389b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561391657613915613959565b5b600182019050919050565b600061392c82613947565b9050919050565b6000819050919050565b6000819050919050565b6000613952826139cd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f636f6e74726163742061646472657373206e6f742076616c6964000000000000600082015250565b7f6c6f636b206e6f74206672656500000000000000000000000000000000000000600082015250565b7f7369676e6572206e6f742076616c696400000000000000000000000000000000600082015250565b7f6d756c746920736967206973206f70656e656400000000000000000000000000600082015250565b7f73696e6765722075736572206d757374206d6f72656e2064656661756c74436f60008201527f756e740000000000000000000000000000000000000000000000000000000000602082015250565b7f6d756c7469207369676e6174757265206973206f70656e656400000000000000600082015250565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b613b2881613815565b8114613b3357600080fd5b50565b613b3f81613827565b8114613b4a57600080fd5b50565b613b5681613839565b8114613b6157600080fd5b50565b613b6d81613845565b8114613b7857600080fd5b50565b613b848161389b565b8114613b8f57600080fd5b5056fea264697066735822122042c16412a6610e9918b78e7831c18b8ee6a1054c4c354032c166e621a228341c64736f6c63430008060033",
}

// MultiSigABI is the input ABI used to generate the binding from.
// Deprecated: Use MultiSigMetaData.ABI instead.
var MultiSigABI = MultiSigMetaData.ABI

// MultiSigBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MultiSigMetaData.Bin instead.
var MultiSigBin = MultiSigMetaData.Bin

// DeployMultiSig deploys a new Ethereum contract, binding an instance of MultiSig to it.
func DeployMultiSig(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MultiSig, error) {
	parsed, err := MultiSigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	libMultiSigAddr, _, _, _ := DeployLibMultiSig(auth, backend)
	MultiSigBin = strings.ReplaceAll(MultiSigBin, "__$75b7a25587b53564bca376d1b99e97afd3$__", libMultiSigAddr.String()[2:])

	libAddressArrayAddr, _, _, _ := DeployLibAddressArray(auth, backend)
	MultiSigBin = strings.ReplaceAll(MultiSigBin, "__$ae7d58307b48f566e6dd130bee0f44ebb6$__", libAddressArrayAddr.String()[2:])

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MultiSigBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MultiSig{MultiSigCaller: MultiSigCaller{contract: contract}, MultiSigTransactor: MultiSigTransactor{contract: contract}, MultiSigFilterer: MultiSigFilterer{contract: contract}}, nil
}

// MultiSig is an auto generated Go binding around an Ethereum contract.
type MultiSig struct {
	MultiSigCaller     // Read-only binding to the contract
	MultiSigTransactor // Write-only binding to the contract
	MultiSigFilterer   // Log filterer for contract events
}

// MultiSigCaller is an auto generated read-only Go binding around an Ethereum contract.
type MultiSigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MultiSigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MultiSigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MultiSigSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MultiSigSession struct {
	Contract     *MultiSig         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MultiSigCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MultiSigCallerSession struct {
	Contract *MultiSigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// MultiSigTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MultiSigTransactorSession struct {
	Contract     *MultiSigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MultiSigRaw is an auto generated low-level Go binding around an Ethereum contract.
type MultiSigRaw struct {
	Contract *MultiSig // Generic contract binding to access the raw methods on
}

// MultiSigCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MultiSigCallerRaw struct {
	Contract *MultiSigCaller // Generic read-only contract binding to access the raw methods on
}

// MultiSigTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MultiSigTransactorRaw struct {
	Contract *MultiSigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMultiSig creates a new instance of MultiSig, bound to a specific deployed contract.
func NewMultiSig(address common.Address, backend bind.ContractBackend) (*MultiSig, error) {
	contract, err := bindMultiSig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MultiSig{MultiSigCaller: MultiSigCaller{contract: contract}, MultiSigTransactor: MultiSigTransactor{contract: contract}, MultiSigFilterer: MultiSigFilterer{contract: contract}}, nil
}

// NewMultiSigCaller creates a new read-only instance of MultiSig, bound to a specific deployed contract.
func NewMultiSigCaller(address common.Address, caller bind.ContractCaller) (*MultiSigCaller, error) {
	contract, err := bindMultiSig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MultiSigCaller{contract: contract}, nil
}

// NewMultiSigTransactor creates a new write-only instance of MultiSig, bound to a specific deployed contract.
func NewMultiSigTransactor(address common.Address, transactor bind.ContractTransactor) (*MultiSigTransactor, error) {
	contract, err := bindMultiSig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MultiSigTransactor{contract: contract}, nil
}

// NewMultiSigFilterer creates a new log filterer instance of MultiSig, bound to a specific deployed contract.
func NewMultiSigFilterer(address common.Address, filterer bind.ContractFilterer) (*MultiSigFilterer, error) {
	contract, err := bindMultiSig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MultiSigFilterer{contract: contract}, nil
}

// bindMultiSig binds a generic wrapper to an already deployed contract.
func bindMultiSig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MultiSigABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiSig *MultiSigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiSig.Contract.MultiSigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiSig *MultiSigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiSig.Contract.MultiSigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiSig *MultiSigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiSig.Contract.MultiSigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MultiSig *MultiSigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MultiSig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MultiSig *MultiSigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MultiSig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MultiSig *MultiSigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MultiSig.Contract.contract.Transact(opts, method, params...)
}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_MultiSig *MultiSigCaller) ContractList(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "contractList", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_MultiSig *MultiSigSession) ContractList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MultiSig.Contract.ContractList(&_MultiSig.CallOpts, arg0, arg1)
}

// ContractList is a free data retrieval call binding the contract method 0x741489b7.
//
// Solidity: function contractList(address , uint256 ) view returns(address)
func (_MultiSig *MultiSigCallerSession) ContractList(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MultiSig.Contract.ContractList(&_MultiSig.CallOpts, arg0, arg1)
}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_MultiSig *MultiSigCaller) DefaultCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "defaultCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_MultiSig *MultiSigSession) DefaultCount() (*big.Int, error) {
	return _MultiSig.Contract.DefaultCount(&_MultiSig.CallOpts)
}

// DefaultCount is a free data retrieval call binding the contract method 0xe8fe7bff.
//
// Solidity: function defaultCount() view returns(uint256)
func (_MultiSig *MultiSigCallerSession) DefaultCount() (*big.Int, error) {
	return _MultiSig.Contract.DefaultCount(&_MultiSig.CallOpts)
}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigCaller) GetAllTask(opts *bind.CallOpts, contractAddr_ common.Address) ([]byte, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getAllTask", contractAddr_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigSession) GetAllTask(contractAddr_ common.Address) ([]byte, error) {
	return _MultiSig.Contract.GetAllTask(&_MultiSig.CallOpts, contractAddr_)
}

// GetAllTask is a free data retrieval call binding the contract method 0x3db98b04.
//
// Solidity: function getAllTask(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigCallerSession) GetAllTask(contractAddr_ common.Address) ([]byte, error) {
	return _MultiSig.Contract.GetAllTask(&_MultiSig.CallOpts, contractAddr_)
}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_MultiSig *MultiSigCaller) GetContractList(opts *bind.CallOpts, signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getContractList", signer_, idx_)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new([8]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([8]common.Address)).(*[8]common.Address)

	return out0, out1, out2, err

}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_MultiSig *MultiSigSession) GetContractList(signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	return _MultiSig.Contract.GetContractList(&_MultiSig.CallOpts, signer_, idx_)
}

// GetContractList is a free data retrieval call binding the contract method 0x3410c6f9.
//
// Solidity: function getContractList(address signer_, uint256 idx_) view returns(uint256, uint256, address[8])
func (_MultiSig *MultiSigCallerSession) GetContractList(signer_ common.Address, idx_ *big.Int) (*big.Int, *big.Int, [8]common.Address, error) {
	return _MultiSig.Contract.GetContractList(&_MultiSig.CallOpts, signer_, idx_)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_MultiSig *MultiSigCaller) GetSafeSig(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getSafeSig", contractAddr_, hash_, candidate_)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_MultiSig *MultiSigSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _MultiSig.Contract.GetSafeSig(&_MultiSig.CallOpts, contractAddr_, hash_, candidate_)
}

// GetSafeSig is a free data retrieval call binding the contract method 0x74fa74f8.
//
// Solidity: function getSafeSig(address contractAddr_, bytes32 hash_, address candidate_) view returns(bool)
func (_MultiSig *MultiSigCallerSession) GetSafeSig(contractAddr_ common.Address, hash_ [32]byte, candidate_ common.Address) (bool, error) {
	return _MultiSig.Contract.GetSafeSig(&_MultiSig.CallOpts, contractAddr_, hash_, candidate_)
}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigCaller) GetSignerSetAddress(opts *bind.CallOpts, contractAddr_ common.Address) ([]byte, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getSignerSetAddress", contractAddr_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigSession) GetSignerSetAddress(contractAddr_ common.Address) ([]byte, error) {
	return _MultiSig.Contract.GetSignerSetAddress(&_MultiSig.CallOpts, contractAddr_)
}

// GetSignerSetAddress is a free data retrieval call binding the contract method 0x65945587.
//
// Solidity: function getSignerSetAddress(address contractAddr_) view returns(bytes)
func (_MultiSig *MultiSigCallerSession) GetSignerSetAddress(contractAddr_ common.Address) ([]byte, error) {
	return _MultiSig.Contract.GetSignerSetAddress(&_MultiSig.CallOpts, contractAddr_)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_MultiSig *MultiSigCaller) GetTaskInfo(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getTaskInfo", contractAddr_, hash_)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return out0, out1, out2, err

}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_MultiSig *MultiSigSession) GetTaskInfo(contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	return _MultiSig.Contract.GetTaskInfo(&_MultiSig.CallOpts, contractAddr_, hash_)
}

// GetTaskInfo is a free data retrieval call binding the contract method 0x328d4d8c.
//
// Solidity: function getTaskInfo(address contractAddr_, bytes32 hash_) view returns(uint256 max, uint256 cnt, bytes)
func (_MultiSig *MultiSigCallerSession) GetTaskInfo(contractAddr_ common.Address, hash_ [32]byte) (*big.Int, *big.Int, []byte, error) {
	return _MultiSig.Contract.GetTaskInfo(&_MultiSig.CallOpts, contractAddr_, hash_)
}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_MultiSig *MultiSigCaller) GetTaskSignerSetAddress(opts *bind.CallOpts, contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "getTaskSignerSetAddress", contractAddr_, hash_)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_MultiSig *MultiSigSession) GetTaskSignerSetAddress(contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	return _MultiSig.Contract.GetTaskSignerSetAddress(&_MultiSig.CallOpts, contractAddr_, hash_)
}

// GetTaskSignerSetAddress is a free data retrieval call binding the contract method 0xea6e0c0c.
//
// Solidity: function getTaskSignerSetAddress(address contractAddr_, bytes32 hash_) view returns(bytes)
func (_MultiSig *MultiSigCallerSession) GetTaskSignerSetAddress(contractAddr_ common.Address, hash_ [32]byte) ([]byte, error) {
	return _MultiSig.Contract.GetTaskSignerSetAddress(&_MultiSig.CallOpts, contractAddr_, hash_)
}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_MultiSig *MultiSigCaller) MultiSignerStore(opts *bind.CallOpts, arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	var out []interface{}
	err := _MultiSig.contract.Call(opts, &out, "multiSignerStore", arg0)

	outstruct := new(struct {
		Work        bool
		Lock        bool
		SignerCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Work = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Lock = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.SignerCount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_MultiSig *MultiSigSession) MultiSignerStore(arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	return _MultiSig.Contract.MultiSignerStore(&_MultiSig.CallOpts, arg0)
}

// MultiSignerStore is a free data retrieval call binding the contract method 0x2696145b.
//
// Solidity: function multiSignerStore(address ) view returns(bool work, bool lock, uint256 SignerCount)
func (_MultiSig *MultiSigCallerSession) MultiSignerStore(arg0 common.Address) (struct {
	Work        bool
	Lock        bool
	SignerCount *big.Int
}, error) {
	return _MultiSig.Contract.MultiSignerStore(&_MultiSig.CallOpts, arg0)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigTransactor) AddSigner(opts *bind.TransactOpts, contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.contract.Transact(opts, "addSigner", contractAddr_, signer_)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigSession) AddSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.AddSigner(&_MultiSig.TransactOpts, contractAddr_, signer_)
}

// AddSigner is a paid mutator transaction binding the contract method 0x2239f556.
//
// Solidity: function addSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigTransactorSession) AddSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.AddSigner(&_MultiSig.TransactOpts, contractAddr_, signer_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigTransactor) CloseMultiSig(opts *bind.TransactOpts, contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.contract.Transact(opts, "closeMultiSig", contractAddr_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigSession) CloseMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.CloseMultiSig(&_MultiSig.TransactOpts, contractAddr_)
}

// CloseMultiSig is a paid mutator transaction binding the contract method 0x56a77bfe.
//
// Solidity: function closeMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigTransactorSession) CloseMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.CloseMultiSig(&_MultiSig.TransactOpts, contractAddr_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigTransactor) DelSigner(opts *bind.TransactOpts, contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.contract.Transact(opts, "delSigner", contractAddr_, signer_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigSession) DelSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.DelSigner(&_MultiSig.TransactOpts, contractAddr_, signer_)
}

// DelSigner is a paid mutator transaction binding the contract method 0x4f93e17f.
//
// Solidity: function delSigner(address contractAddr_, address signer_) returns()
func (_MultiSig *MultiSigTransactorSession) DelSigner(contractAddr_ common.Address, signer_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.DelSigner(&_MultiSig.TransactOpts, contractAddr_, signer_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigTransactor) OpenMultiSig(opts *bind.TransactOpts, contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.contract.Transact(opts, "openMultiSig", contractAddr_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigSession) OpenMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.OpenMultiSig(&_MultiSig.TransactOpts, contractAddr_)
}

// OpenMultiSig is a paid mutator transaction binding the contract method 0xba272e03.
//
// Solidity: function openMultiSig(address contractAddr_) returns()
func (_MultiSig *MultiSigTransactorSession) OpenMultiSig(contractAddr_ common.Address) (*types.Transaction, error) {
	return _MultiSig.Contract.OpenMultiSig(&_MultiSig.TransactOpts, contractAddr_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_MultiSig *MultiSigTransactor) RemoveSafeSig(opts *bind.TransactOpts, contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _MultiSig.contract.Transact(opts, "removeSafeSig", contractAddr_, hash_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_MultiSig *MultiSigSession) RemoveSafeSig(contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _MultiSig.Contract.RemoveSafeSig(&_MultiSig.TransactOpts, contractAddr_, hash_)
}

// RemoveSafeSig is a paid mutator transaction binding the contract method 0x13f1ff1b.
//
// Solidity: function removeSafeSig(address contractAddr_, bytes32 hash_) returns()
func (_MultiSig *MultiSigTransactorSession) RemoveSafeSig(contractAddr_ common.Address, hash_ [32]byte) (*types.Transaction, error) {
	return _MultiSig.Contract.RemoveSafeSig(&_MultiSig.TransactOpts, contractAddr_, hash_)
}

// OwnedMetaData contains all meta data concerning the Owned contract.
var OwnedMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610224806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b610043610075565b6040516100509190610185565b60405180910390f35b610073600480360381019061006e9190610149565b610099565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100f157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081359050610143816101d7565b92915050565b60006020828403121561015f5761015e6101d2565b5b600061016d84828501610134565b91505092915050565b61017f816101a0565b82525050565b600060208201905061019a6000830184610176565b92915050565b60006101ab826101b2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6101e0816101a0565b81146101eb57600080fd5b5056fea264697066735822122089ce7fbab0e1d575be5c8b6491d531440cd2bc4c80d84c29650909dad7ddaa5c64736f6c63430008060033",
}

// OwnedABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnedMetaData.ABI instead.
var OwnedABI = OwnedMetaData.ABI

// OwnedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OwnedMetaData.Bin instead.
var OwnedBin = OwnedMetaData.Bin

// DeployOwned deploys a new Ethereum contract, binding an instance of Owned to it.
func DeployOwned(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Owned, error) {
	parsed, err := OwnedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OwnedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Owned{OwnedCaller: OwnedCaller{contract: contract}, OwnedTransactor: OwnedTransactor{contract: contract}, OwnedFilterer: OwnedFilterer{contract: contract}}, nil
}

// Owned is an auto generated Go binding around an Ethereum contract.
type Owned struct {
	OwnedCaller     // Read-only binding to the contract
	OwnedTransactor // Write-only binding to the contract
	OwnedFilterer   // Log filterer for contract events
}

// OwnedCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnedSession struct {
	Contract     *Owned            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnedCallerSession struct {
	Contract *OwnedCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// OwnedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnedTransactorSession struct {
	Contract     *OwnedTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnedRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnedRaw struct {
	Contract *Owned // Generic contract binding to access the raw methods on
}

// OwnedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnedCallerRaw struct {
	Contract *OwnedCaller // Generic read-only contract binding to access the raw methods on
}

// OwnedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnedTransactorRaw struct {
	Contract *OwnedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwned creates a new instance of Owned, bound to a specific deployed contract.
func NewOwned(address common.Address, backend bind.ContractBackend) (*Owned, error) {
	contract, err := bindOwned(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Owned{OwnedCaller: OwnedCaller{contract: contract}, OwnedTransactor: OwnedTransactor{contract: contract}, OwnedFilterer: OwnedFilterer{contract: contract}}, nil
}

// NewOwnedCaller creates a new read-only instance of Owned, bound to a specific deployed contract.
func NewOwnedCaller(address common.Address, caller bind.ContractCaller) (*OwnedCaller, error) {
	contract, err := bindOwned(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnedCaller{contract: contract}, nil
}

// NewOwnedTransactor creates a new write-only instance of Owned, bound to a specific deployed contract.
func NewOwnedTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnedTransactor, error) {
	contract, err := bindOwned(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnedTransactor{contract: contract}, nil
}

// NewOwnedFilterer creates a new log filterer instance of Owned, bound to a specific deployed contract.
func NewOwnedFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnedFilterer, error) {
	contract, err := bindOwned(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnedFilterer{contract: contract}, nil
}

// bindOwned binds a generic wrapper to an already deployed contract.
func bindOwned(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Owned *OwnedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Owned.Contract.OwnedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Owned *OwnedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Owned.Contract.OwnedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Owned *OwnedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Owned.Contract.OwnedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Owned *OwnedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Owned.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Owned *OwnedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Owned.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Owned *OwnedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Owned.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Owned *OwnedCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Owned.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Owned *OwnedSession) Owner() (common.Address, error) {
	return _Owned.Contract.Owner(&_Owned.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Owned *OwnedCallerSession) Owner() (common.Address, error) {
	return _Owned.Contract.Owner(&_Owned.CallOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Owned *OwnedTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Owned.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Owned *OwnedSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Owned.Contract.TransferOwnership(&_Owned.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Owned *OwnedTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Owned.Contract.TransferOwnership(&_Owned.TransactOpts, newOwner)
}
